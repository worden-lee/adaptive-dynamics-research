---
layout: page
title: "Evolution in a Food Web part 2"
wmd_project: Selection_Gradients
---

As in the "Food Web" section, we provide a directed graph representing the food web. Node labels are species names, and arrow labels are strength of predation.  Let's say the conversion factor from prey to predator is constant $$k$$.

Then species $$i$$'s dynamics is

\[* \frac{dX_i}{dt} = \left(r_i + k \sum_{j\to i} f_{ji}X_j - \sum_{i\to j} f_{ij}X_j\right) X_i \]

where

$$f_{ij} = f(u_i,u_j)$$ is some function of the two phenotypes controlling how well $$j$$ eats $$i$$; 

$$u_i$$ is the phenotype of species $$i$$; and

$$r_i = (0\text{ if }i\text{ is a predator, }1\text{ else})$$.

This will induce the usual dynamics of apparent competition, and adaptive dynamics of all the $$u_i$$ follows.

* UPDATE: the above forces a fixed ratio of $$-k$$ between paired $$a$$ values.
We can allow that to drift a little by giving each a 'conversion efficiency'
value, maybe? Use a planar $$s_i=(u_i,\gamma_i)$$, and 
instead of writing $$k f(u_i,u_j)$$, we use $$k \gamma_i \gamma_j f(u_i,u_j)$$.
On the prey side just $$f(u_i,u_j)$$.   Then the ratio is $$k\gamma_i\gamma_j$$.
Let the $$\gamma$$ values vary more slowly than $$f$$. 

* UPDATE: Yes, but that way selection is only on the predator's $$\gamma$$
because they only affect the predatory's fitness.
Predatory's $$\gamma_i$$ can be how much it gets from eating a prey,
but what does it mean for the prey to change the conversion rate?
A predation event kills less than one prey animal?
I mean, maybe if it's a fungus or something.
That might work for me - let $$f(u_i,u_j)$$ be encounter rate,
predator's $$\gamma_j$$ is how much it gets from encounter,
prey's $$\sigma_i$$ is how much it loses from encounter, so
we can say $$-k \gamma_j f(u_i,u_j)$$ and $$\sigma_i f(u_i, u_j)$$
respectively, which will produce the selection I'm looking for,
and ought to lead to marginal benefit for both.

<source-file filename=foodweb2.py.step lang=python texdisplay=none>
from sage.all import * 
import dynamicalsystems

class vertex_indexer(dynamicalsystems.indexer):
    def init(self, x):
	self._f = x
    def __getitem__(self, tup):
	# tup is a tuple (vertex, number)
	#v, i = tup
	return dynamicalsystems.subscriptedsymbol( self._f, *tup )
	return SR.symbol(
	    '%s_%s_%s' % (self._f, str(i), str(v)),
	    latex_name = '%s_{''%s%s}' % (self._f, latex(i), latex(v))
	)

class vertex_indexer_2d(dynamicalsystems.indexer):
    def __init__(self, x):
	self._f = x
    def __getitem__(self, tupi):
        class vertex_indexer_2d_inner( dynamicalsystems.indexer ):
	    def __init__(self, x, tupi):
		self._f = x
		self._tupi = tupi
	    def __getitem__(self, tupj):
		# tup* is a tuple (vertex, number)
		v, i = self._tupi
		w, j = tupj
		return dynamicalsystems.subscriptedsymbol( self._f, i, v, j, w )
		return SR.symbol(
		    '_'.join( [self._f, str(i), str(v), str(j), str(w)] ),
		    latex_name = '%s_{''%s%s%s%s}' % (self._f, latex(i), latex(v), latex(j), latex(w))
		)
	return vertex_indexer_2d_inner(self._f, tupi)

class FoodWebModel(dynamicalsystems.PopulationDynamicsSystem):
    def __init__(
	self,
	graph,
	bindings=dynamicalsystems.Bindings()):
	self._graph = graph
	# population indices in this model are tuples (vertex, sequential number)
	x_indices = [ (v,0) for v in graph.vertices() ]
        pop_indexer = vertex_indexer('X')
	self._u_indexer = vertex_indexer('u')
	self._gamma_indexer = vertex_indexer(SR.symbol('gamma', latex_name='\\gamma'))
	self._sigma_indexer = vertex_indexer(SR.symbol('sigma', latex_name='\\sigma'))
	super(FoodWebModel,self).__init__(
	    [], x_indices, pop_indexer, bindings=bindings
	)
    def flow(self):
	inflo = { v: 0 for v in self._vars }
	outflo = { v: 0 for v in self._vars }
	basal = self._graph.sources()
	print 'basal:', basal
	k = SR.symbol( 'k' )
	slow = SR.symbol( 'slow' )
	for i in self._population_indices:
	    xi = self._population_indexer[i]
	    for j in self._population_indices:
	        xj = self._population_indexer[j]
		if i != j and self._graph.has_edge( j[0], i[0] ):
		    ## i eats j
		    axx = self._f( i, j ) * xi * xj
		    outflo[ xj ] += (1 + slow*self._sigma_indexer[j]) * axx
		    inflo[ xi ] += k * (1 + slow*self._gamma_indexer[i]) * axx
		if i[0] in basal and j[0] in basal:
		    outflo[ xj ] += xi*xj
	    if inflo[xi] == 0:
		inflo[xi] += self._bindings( 'r' ) * xi
	    else:
		outflo[xi] += self._bindings( 'm' ) * xi
	return {
	    v : self._bindings( inflo[v] - outflo[v] ) for v in inflo.keys()
	}
    def _f(self, i, j):
	from sage.symbolic.function_factory import function
	return function('f')( self._u_indexer[i], self._u_indexer[j] )
    def mutate(self, index):
	i = 1 + max( i[1] for i in self._population_indices )
	sport = (index[0], i)
	self.set_population_indices( self._population_indices + [ sport ] )
	return sport
    def fake_population_index(self):
	return ('Fake', 0)
    def plot_tikz(self, filename):
	from sage.misc.latex import _latex_file_
	LF = open( filename, 'w' )
	# put all arrows pointing upward
	self._graph.set_pos( self._graph.layout_acyclic() )
	LF.write( _latex_file_( self._graph, title='' ) )
	LF.close()
</source-file>

<source-file filename=foodweb2.sage.step lang=sage texdisplay=none>
# requires: foodweb2.py
# produces: foodweb2.sobj foodweb2.sage.out.tex foodweb2.tikz.tex
from sage.all import * 

import foodweb2
import dynamicalsystems

ltx = dynamicalsystems.latex_output( 'foodweb2.sage.out.tex' )

# now that I've defined the general resource-competition model, let's
# create a 1-resource, 1-population instantiation to work with
var('a b')

fb = (
    dynamicalsystems.Bindings( k = 9/10, slow=1/50 ) +
    dynamicalsystems.FunctionBindings( { 'f':SR('2 + 4/5*cos( u - v )').function(SR('u'),SR('v')) } )
)

foodweb_pred_prey = foodweb2.FoodWebModel(
    DiGraph( { a:[b] } ),
    bindings = dynamicalsystems.Bindings( { 'r':1, 'm':1 } )
);

ltx.write( 'The foodweb model:', foodweb_pred_prey.bind(fb) )

foodweb_pred_prey.plot_tikz( 'foodweb2.tikz.tex' )

ltx.close()
save_session('foodweb2')
#sys.exit( 0r )
</source-file>

<source-file filename=foodweb2-adap.sage.step lang=sage texdisplay=none>
# requires: foodweb2.py foodweb2.sobj
# produces: foodweb2-adap.sage.out.tex foodweb2-adap.sobj
from sage.all import * 

import foodweb2, dynamicalsystems

load_session("foodweb2")

ltx = dynamicalsystems.latex_output( 'foodweb2-adap.sage.out.tex' )

foodweb_adap_formal = dynamicalsystems.AdaptiveDynamicsModel( 
    foodweb_pred_prey,
    [ foodweb_pred_prey._u_indexer, foodweb_pred_prey._gamma_indexer, foodweb_pred_prey._sigma_indexer  ],
    early_bindings=fb,
    equilibrium = foodweb_pred_prey.symbolic_equilibria()
).bind( { 'gamma':1 } )

ltx.write( 'The foodweb adaptive dynamics:', foodweb_adap_formal.bind(fb) )

equil = foodweb_pred_prey.interior_equilibria()
print equil

#foodweb_adap = dynamicalsystems.AdaptiveDynamicsModel( 
#    foodweb_pred_prey,
#    [ foodweb_pred_prey._u_indexer, foodweb_pred_prey._gamma_indexer ],
#    early_bindings=fb,
#    equilibrium = dynamicalsystems.Bindings( equil[0] )
#).bind( { 'gamma':1 } )
foodweb_adap = foodweb_adap_formal.bind( equil[0] )

#ltx.write( 'Adaptive dynamics of model:\n', foodweb_adap )
#ltx.write_environment( 'align*', [ '\\\\\n  '.join( r'\frac{d%s}{dt} &\propto %s' % (latex(v), latex(foodweb_adap._S[v])) for v in foodweb_adap._vars ) ] )

ltx.close()

save_session('foodweb2-adap')
</source-file>

<source-file filename="foodweb2-adap-traj.sage.step" texdisplay=none>
# requires: foodweb2-adap.sobj
# produces: foodweb2-adap-traj.sobj
from sage.all import *

import foodweb2, dynamicalsystems, lotkavolterra

load_session("foodweb2-adap")

pred_prey_init = dynamicalsystems.Bindings( { 'u_a_0':0.1, 'u_b_0':0, 'gamma_a_0':0, 'gamma_b_0':0, 'sigma_a_0':1, 'sigma_b_0':1 } )

#ltx.write( 'flow at ', '$%s$'%latex( dynamicalsystems.column_vector( [ pred_prey_init( v ) for v in foodweb_adap._vars ] ) ), ': ', 
#    '$%s$'%latex( dynamicalsystems.column_vector( pred_prey_init( foodweb_adap._flow[v] ) for v in foodweb_adap._vars ) ) )

pred_prey_traj = foodweb_adap.solve( [ pred_prey_init( v ) for v in foodweb_adap._vars ], end_time=1000 ) #, step=0.003 )

save_session('foodweb2-adap-traj')
</source-file>

<project-file filename=foodweb2.tikz.crop.svg/>

<project-file filename=foodweb2.sage.out.tex/>

<project-file filename=foodweb2-adap.sage.out.tex/>

<source-file filename="foodweb2.plot.sage.step" texdisplay=none>
# requires: foodweb2-adap-traj.sobj
# produces: foodweb2.plot.sage.out.tex 
# produces: foodweb2-pred-prey-adap.png foodweb2-pred-prey-adap.svg
# produces: foodweb2-pred-prey-adap-difference.png
# produces: foodweb2-pred-prey-a-vs-t.png foodweb2-pred-prey-a-vs-a.png
# produces: foodweb2-pred-prey-x-vs-t.png
from sage.all import *
from sage.misc.latex import latex

import foodweb2, dynamicalsystems, lotkavolterra

# create variables with custom latex names because load_session
# creates them wrong: http://trac.sagemath.org/ticket/17559
#for x in ('X_0', 'X_i', 'R_0'): hat(SR.symbol(x))
#SR.symbol( 'c_0_0', latex_name='c_{00}' )
#SR.symbol( 'c_i_0', latex_name='c_{i0}' )

load_session("foodweb2-adap-traj")

ltx = dynamicalsystems.latex_output( 'foodweb2.plot.sage.out.tex' )

#foodweb_adap.bind_in_place( fb )

print 'flow at initial conditions:', pred_prey_init( foodweb_adap._flow )

#ppp = Graphics()
#for v, c in zip( foodweb_adap._vars, ['blue', 'red', 'purple','green'] ):
#    ppp += pred_prey_traj.plot( 't', v, color=c, legend_label=l )
#    ppp += pred_prey_traj.plot( 't', v, color=c, legend_label='${}$'.format(latex(v)) )

ppp = pred_prey_traj.plot( 't', foodweb_adap._vars )
ppp.save( 'foodweb2-pred-prey-adap.png',
    #ticks=[100,pi],
    #tick_formatter=[None,pi],
    figsize=(5,5)
)
ppp.save( 'foodweb2-pred-prey-adap.svg',
    #ticks=[500,pi],
    #tick_formatter=[None,pi],
    figsize=(3,3)
)

pred_prey_traj.plot( 't', 'u_a_0 - u_b_0', legend_label='$u_{a0}-u_{b0}$' ).save(
    'foodweb2-pred-prey-adap-difference.png',
    #ymin=0,
    #ymax=3.2,
    #ticks=[100,pi/2],
    #tick_formatter=[None,pi],
    figsize=(5,5)
)

xs = foodweb_adap._popdyn_model.equilibrium_vars()
#ppx = Graphics()
#for xhat in xs:
#    ppx += pred_prey_traj.plot( 't', xhat, legend_label='$%s$'%latex(xhat) )
ppx = pred_prey_traj.plot( 't', xs )
ppx.save( 'foodweb2-pred-prey-x-vs-t.png', figsize=(5,5) )

flv = lotkavolterra.LotkaVolterraAdaptiveDynamics( foodweb_adap,
	r_name_indexer=foodweb2.vertex_indexer('r'),
        a_name_indexer=foodweb2.vertex_indexer_2d('a') )

atp = Graphics()
for i in foodweb_adap._popdyn_model._population_indices:
    for j in foodweb_adap._popdyn_model._population_indices:
	atp += pred_prey_traj.plot( 't', fb( flv._lv_model._A_bindings( flv._lv_model._a_indexer[i][j] ) ),
	    color = (i == j and 'red' or 'green') )
atp.save( 'foodweb2-pred-prey-a-vs-t.png', figsize=(5,5) )

lotkavolterra.plot_aij_with_arrows( pred_prey_traj, flv, 'foodweb2-pred-prey-a-vs-a.png', bindings=fb )

lotkavolterra.plot_aij_with_arrows( pred_prey_traj, flv, 'foodweb2-pred-prey-a-vs-a-detail.png', bindings=fb, xmin=-1.9955, xmax=-1.9945, ymin=1.795, ymax=1.796 )

ltx.close()
</source-file>

<project-file filename=foodweb2-pred-prey-adap.png/>

<project-file filename=foodweb2-pred-prey-adap-difference.png/>

<project-file filename=foodweb2-pred-prey-x-vs-t.png/>

<project-file filename=foodweb2-pred-prey-a-vs-t.png/>

<project-file filename=foodweb2-pred-prey-a-vs-a.png/>

<project-file filename=foodweb2-pred-prey-a-vs-a-detail.png/>

<source-file filename=foodweb2-2-2.sage.step lang=sage texdisplay=none>
# requires: foodweb2.py
# produces: foodweb2-2-2.sobj foodweb2-2-2.sage.out.tex foodweb2-2-2.tikz.tex
from sage.all import * 
)
import foodweb2
import dynamicalsystems
import lotkavolterra

ltx = dynamicalsystems.latex_output( 'foodweb2-2-2.sage.out.tex' )

# now that I've defined the general resource-competition model, let's
# create a 1-resource, 1-population instantiation to work with
var('R_0 R_1 P_0 P_1')
foodweb_2_2 = foodweb.FoodWebModel(
    DiGraph( { R_0:[P_0,P_1], R_1:[P_0,P_1] } ),
    bindings = dynamicalsystems.Bindings( { 'r':1, 'm':1 } )
);

fb = ( dynamicalsystems.FunctionBindings( { 'f':SR('1 + cos( u - v )').function(SR('u'),SR('v')) } )
    + dynamicalsystems.Bindings( k=9/10 ) )

fb_2_2 = foodweb_2_2.bind(fb)

ltx.write( 'The foodweb model:', fb_2_2 )

foodweb_2_2.plot_tikz( 'foodweb2-2-2.tikz.tex' )

#ltx.close()
#save_session('foodweb2-2-2')
#sys.exit( 0r )

equil = fb_2_2.interior_equilibria()
print equil

init_2_2 = dynamicalsystems.Bindings( { 'u_0_R_0':-0.1, 'u_0_R_1':0, 'u_0_P_0':-0.07, 'u_0_P_1':0.02 } ) 

#print init_2_2( dynamicalsystems.Bindings( equil[0] ) )

foodweb_adap = dynamicalsystems.AdaptiveDynamicsModel( 
    foodweb_2_2,
    [ foodweb_2_2._u_indexer ],
    equilibrium = dynamicalsystems.Bindings()
    #equilibrium = dynamicalsystems.Bindings( equil[0] )
).bind( { 'gamma':1 } )

ltx.write( 'Adaptive dynamics of model:\n', foodweb_adap )
#ltx.write_environment( 'align*', [ '\\\\\n  '.join( r'\frac{d%s}{dt} &\propto %s' % (latex(v), latex(foodweb_adap._S[v])) for v in foodweb_adap._vars ) ] )

#ltx.write( 'flow at ', '$%s$'%latex( dynamicalsystems.column_vector( [ init_2_2( v ) for v in foodweb_adap._vars ] ) ), ': ',
#    '$%s$'%latex( dynamicalsystems.column_vector( init_2_2( foodweb_adap._flow[v] ) for v in foodweb_adap._vars ) ) )

fb_adap = foodweb_adap.bind( fb + dynamicalsystems.Bindings( equil[0] ) )

#ltx.write( 'Bound adaptive dynamics:\n', fb_adap )

traj_2_2 = fb_adap.solve( [ init_2_2( v ) for v in foodweb_adap._vars ], end_time=30 ) #, step=0.003 )

print traj_2_2._timeseries

ltx.close()

save_session('foodweb2-2-2')
</source-file>

<project-file filename=foodweb2-2-2.tikz.crop.svg/>

<project-file filename=foodweb2-2-2.sage.out.tex/>

<source-file filename="foodweb2-2-2.plot.sage.step" texdisplay=none>
# requires: foodweb2-2-2.sobj
# produces: foodweb2-2-2.plot.sage.out.tex foodweb2-2-2-adap.png
# produces: foodweb2-2-2-a-vs-a.png foodweb2-2-2-a-vs-t.png
# produces: foodweb2-2-2-x-vs-t.png
from sage.all import *
from sage.misc.latex import latex

import foodweb2
import dynamicalsystems
import lotkavolterra

load_session("foodweb2-2-2")

ltx = dynamicalsystems.latex_output( 'foodweb2-2-2.plot.sage.out.tex' )

# doesn't pickle?
sym_lv = lotkavolterra.LotkaVolterraAdaptiveDynamics( foodweb_adap,
	r_name_indexer=foodweb.vertex_indexer('r'),
        a_name_indexer=foodweb.vertex_indexer_2d('a') )

x0 = dynamicalsystems.hat( sym_lv._lv_model._vars[0] )
x1 = dynamicalsystems.hat( sym_lv._lv_model._vars[1] )
i0 = sym_lv._lv_model._population_indices[0] 
i1 = sym_lv._lv_model._population_indices[1] 
from sage.symbolic.function_factory import function

def expand_vector( v ): return vector( [ expand(x) for x in v ] )

ltx.write_equality_aligned(
    function('A')( x0, x1 ),
    #sym_lv.A_pair( i0, i1 ),
    sym_lv.dudt_bindings()( sym_lv.A_pair( i0, i1 ) )
)

ltx.write_equality_aligned(
    function('S')( x0, x1 ),
    #sym_lv.S_pair( i0, i1 ),
    sym_lv.dudt_bindings()( sym_lv.S_pair( i0, i1 ) )
)

ltx.write_equality_aligned(
    function('D')( x0, x1 ),
    sym_lv.D_pair( i0, i1 ),
    expand_vector( sym_lv.dudt_bindings()( sym_lv.D_pair( i0, i1 ) ) )
)

ltx.write_equality_aligned(
    function('I')( x0, x1 ),
    sym_lv.I_pair( i0, i1 ),
    expand_vector( sym_lv.dudt_bindings()( sym_lv.I_pair( i0, i1 ) ) )
)

ltx.write_equality_aligned(
    function('dAdt', latex_name=r'\frac{dA}{dt}')( x0, x1 ),
    sym_lv.dAdt_pair( i0, i1 ),
    expand_vector( sym_lv.dudt_bindings()( sym_lv.dAdt_pair( i0, i1 ) ) )
)

ppp = Graphics()
for v, c in zip( fb_adap._vars, ['blue', 'red', 'purple', 'orange'] ):
    ppp += traj_2_2.plot( 't', v, color=c )
ppp.save( 'foodweb2-2-2-adap.png', figsize=(5,5) )

xs = fb_adap._popdyn_model.equilibrium_vars()
ppx = Graphics()
for xhat, c in zip(xs, ['blue', 'red', 'purple', 'orange']):
    ppx += traj_2_2.plot( 't', xhat, legend_label='$%s$'%latex(xhat), color=c )
ppx.save( 'foodweb2-2-2-x-vs-t.png', figsize=(5,5) )

flv = lotkavolterra.LotkaVolterraAdaptiveDynamics( fb_adap,
	r_name_indexer=foodweb.vertex_indexer('r'),
        a_name_indexer=foodweb.vertex_indexer_2d('a') )

atp = Graphics()
for i in fb_adap._popdyn_model._population_indices:
    for j in fb_adap._popdyn_model._population_indices:
	atp += traj_2_2.plot( 't', flv._lv_model._A_bindings( flv._lv_model._a_indexer[i][j] ),
	    color = (i == j and 'red' or 'green') )
atp.save( 'foodweb2-2-2-a-vs-t.png', figsize=(5,5) )

lotkavolterra.plot_aij_with_arrows( traj_2_2, flv, 'foodweb2-2-2-a-vs-a.png' )

lotkavolterra.plot_aij_with_arrows( traj_2_2, flv, 'foodweb2-2-2-a-vs-a-detail.png', xmin=-1.993, xmax=-1.9925, ymin=1.79325, ymax=1.79375 )

ltx.close()
</source-file>

<project-file filename=foodweb2-2-2.plot.sage.out.tex/>

<project-file filename=foodweb2-2-2-adap.png/>

<project-file filename=foodweb2-2-2-x-vs-t.png/>

<project-file filename=foodweb2-2-2-a-vs-a.png/>

<project-file filename=foodweb2-2-2-a-vs-a-detail.png/>

<project-file filename=foodweb2-2-2-a-vs-t.png/>

