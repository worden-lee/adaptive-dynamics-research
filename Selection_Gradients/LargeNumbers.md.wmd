---
layout: page
title: "'Law of Large Numbers' adaptive dynamics model"
wmd_project: Selection_Gradients
---
This model investigation is hoped to approximate the behavior of my
$$\Delta a_{ij}$$ model (in my dissertation).  Here, rather than generate
small i.i.d. changes to $$a$$ values directly we use a complex phenotype
in each agent to generate nearly independent direct and indirect effects.

Let each population $$i$$ be described by phenotype vector
$$u_i\in\mathbb{R}^k$$ for some (sufficiently large) $$k$$.
Using a random non-symmetric square matrix $$M$$ we let
$$a_{ij} = u_i^T M u_j$$.
Then as $$u_i$$ and $$u_j$$ change,
\[* \Delta a_{ij} = \Delta u_i^T M u_j + u_i^T M \Delta u_j + \mathcal{O}(\Delta u^2) \]
while
\[* \Delta a_{ji} = \Delta u_j^T M u_i + u_j^T M \Delta u_i + \mathcal{O}(\Delta u^2). \]
In particular, the contributions of $$\Delta u_i$$ to each of these values
appear to be independent, since the $$(m,n)$$ element of $$M$$ is independent
of the $$(n,m)$$ element.  I guess I can't rule out that the $$u$$ vectors
might converge to a space where these things become correlated, but I'll
believe it when I see it.

<source-file filename=large.py.step lang=python texdisplay=none>
from sage.all import * 
import os
import sys
sys.path.append( os.environ['SageUtils'] )
sys.path.append( os.environ['SageDynamics'] )
sys.path.append( os.environ['SageAdaptiveDynamics'] )
import latex_output
import dynamicalsystems
import adaptivedynamics

def LargeNumbersPopulation( k ):
    M = random_matrix( RDF, k )
    class a_indexer(dynamicalsystems.indexer):
        def __init__(self, model):
            self._model = model
        def __getitem__(self, i):
            class a_indexer_inner(dynamicalsystems.indexer):
                def __init__(self, model, i):
            	    self._model = model
            	    self._i = i
                def __getitem__(self, j):
		    return (
			vector( [ self._model._u_indexer[a][i] for a in range(k) ] ) *
			M *
			vector( [ self._model._u_indexer[a][j] for a in range(k) ] )
		    )
            return a_indexer_inner( self._model, i )
    class LargeNumbersPopulationClass(dynamicalsystems.PopulationDynamicsSystem):
        def __init__(
            self,
            n=10,
            bindings=dynamicalsystems.Bindings()):
            # our u is a vector of population indexers
	    # it would be better if it was just vector-valued,
	    # if AdaptiveDynamicsModel could differentiate wrt a vector
	    vu = dynamicalsystems.indexer_2d('u')
            self._u_indexers = [ vu[i] for i in range(k) ]
            self._r_indexer = dynamicalsystems.const_indexer(1)
            self._a_indexer = a_indexer(self)
            super(LargeNumbersPopulation,self).__init__(
                [], [], vertex_indexer('X'), bindings=bindings
            )
            self.generate_random_community(n)
        def flow(self):
            flo = {}
            for i in self._population_indices:
                xi = self._population_indexer[i]
                flo[xi] = self._r_indexer[i]*xi
                for j in self._population_indices:
                    xj = self._population_indexer[j]
                    flo[xi] += xi * xj * self._a_indexer[i][j]
            return flo
        def generate_random_community(self, n):
            for _ in range(n):
                self.add_random_species()
        def add_random_species(self):
            try:
                n = 1 + max( i[0] for i in self._population_indices )
            except ValueError: # empty sequence
                n = 0
            import numpy
            self._a_lookup[n] = { n: (-1,0,0) }
            for i in self._population_indices:
                bin = RDF(numpy.random.normal(0,1))
                bni = RDF(numpy.random.normal(0,1))
                c = 1
                d = 1
                theta = RDF(numpy.random.uniform(0,2*pi))
                rho = RDF(numpy.random.uniform(0,2*pi))
                self._a_lookup[i[0]][n] = (bin, c*cos(theta), d*cos(rho))
                self._a_lookup[n][i[0]] = (bni, c*sin(theta), d*sin(rho))
            ni = (n,0)
            self.set_population_indices( self._population_indices + [ni] )
            return ni
        def mutate(self, index):
            sport = index + 1
            self.set_population_indices( self._population_indices + [ sport ] )
            return sport
        def fake_population_index(self):
            return 'Fake'

</source-file>

<source-file filename=large-assemble.sage.step lang=sage texdisplay=none>
# requires: large.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageUtils)/latex_output.py
# produces: large-assemble.sobj
from sage.all import *
from sage.misc.latex import _latex_file_

import large
import latex_output
import dynamicalsystems

set_random_seed(0)

N_pop = 1#5

smr = large.LargeNumbersPopulation( 0 )

t = 0
state = dynamicalsystems.Bindings()
soln = dynamicalsystems.Trajectory( smr, [] )
while smr.n_populations() < N_pop:
    ni = smr.add_random_species()
    state[ smr._population_indexer[ni] ] = 1
    smu = smr.bind( { smr._u_indexer[i]:0 for i in smr._population_indices } )
    print 'go', t, 'to', t+100; sys.stdout.flush()
    ni_soln = smu.solve_gsl( [ state(x) for x in smu._vars ], start_time=t, end_time=t+100 )
    if any( abs(x)>1e+7 or math.isnan(x) for x in ni_soln._timeseries[-1].values() ):
	# it caused an explosion, back it out
	print ni, 'caused an explosion'
	smr.remove_population( ni )
	continue
    state = ni_soln._timeseries[-1]
    t = state('t')
    soln += ni_soln
    defunct = set( [ i for i in smr._population_indices if ni_soln._timeseries[-1]( smr._population_indexer[i] ) < 0.001 ] )
    if len(defunct) > 0:
        print 'extinctions:', defunct
        smr.remove_populations( defunct )

del smu
del ni_soln
save_session( 'large-assemble' )
</source-file>

<source-file filename=large-assemble-plot.sage.step lang=sage texdisplay=none>
# requires: large.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageUtils)/latex_output.py
# requires: large-assemble.sobj
# produces: large-assemble.sage.out.tex large-assemble.svg
from sage.all import *
from sage.misc.latex import _latex_file_

import large
import latex_output
import dynamicalsystems

load_session( 'large-assemble' )

ltx = latex_output.latex_output( 'large-assemble.sage.out.tex' )

ltx.write( smr )

ltx.close()

soln.plot( 't', smr._vars, ylabel='$X$' ).save( filename='large-assemble.svg' )
</source-file>

<project-file filename=large-assemble.sage.out.tex/>

<project-file filename=large-assemble.svg/>

<source-file filename=large-evol.sage.step lang=sage texdisplay=none>
# requires: large.py
# requires: $(SageUtils)/latex_output.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py
# requires: lotkavolterra.py
# requires: large-assemble.sobj
# produces: large-evol.sobj
from sage.all import *
from sage.misc.latex import _latex_file_

import large
import latex_output
import dynamicalsystems
import adaptivedynamics
import lotkavolterra

load_session( 'large-assemble' )

ltx = latex_output.latex_output( 'large-evol.sage.out.tex' )

def lv_interior_equilibrium( popdyn ):
    import sympy
    eqns = [ sympy.sympify( popdyn.add_hats()( (popdyn._flow[x]/x).simplify_rational() ) ) for x in popdyn._vars ]
    print eqns; sys.stdout.flush()
    #eqs = solve( eqns, *popdyn.equilibrium_vars(), solution_dict=True )
    eqs = sympy.solve( eqns, *popdyn.equilibrium_vars() )
    return dynamicalsystems.Bindings( { x: eqs[ sympy.sympify(x) ] for x in popdyn.equilibrium_vars() } )

u_init = dynamicalsystems.Bindings( { smr._u_indexer[i]:0 for i in smr._population_indices } )

equil = lv_interior_equilibrium( smr )
eq0 = dynamicalsystems.Bindings( equil )
#equil = smr.interior_equilibria()
print 'equil:', eq0
print 'equil at u=0:', u_init( eq0 )

sm_adap = adaptivedynamics.AdaptiveDynamicsModel( 
    smr,
    [ smr._u_indexer ],
    #early_bindings=fb,
    equilibrium = eq0
).bind( { 'gamma':1 } )

ltx.write( 'Adaptive dynamics of model:\n', sm_adap )

ad_init = dynamicalsystems.Bindings( { u:0 for u in sm_adap._vars } )
ad_init_state = [ ad_init(u) for u in sm_adap._vars ]

sm_traj = sm_adap.solve( ad_init_state, end_time=10, step=0.01 )

slv = lotkavolterra.LotkaVolterraAdaptiveDynamics( sm_adap,
	r_name_indexer=large.vertex_indexer('r'),
        a_name_indexer=large.vertex_indexer_2d('a') )

ltx.close()

save_session('large-evol')
</source-file>

<source-file filename="large-evol-plot.sage.step" texdisplay=none>
# requires: large-evol.sobj
# produces: large-evol-plot.sage.out.tex 
# produces: large-a-vs-t.svg large-a-vs-a.svg
from sage.all import *
from sage.misc.latex import _latex_file_
from sage.misc.latex import latex

import large
import latex_output
import dynamicalsystems
import adaptivedynamics
import lotkavolterra

# create variables with custom latex names because load_session
# creates them wrong: http://trac.sagemath.org/ticket/17559
#for x in ('X_0', 'X_i', 'R_0'): hat(SR.symbol(x))
#SR.symbol( 'c_0_0', latex_name='c_{00}' )
#SR.symbol( 'c_i_0', latex_name='c_{i0}' )

load_session("large-evol")

ltx = latex_output.latex_output( 'large-evol-plot.sage.out.tex' )

#ltx.write( 'sm\_traj t:', [ ts('t') for ts in sm_traj._timeseries ], '\n\n' )
#ltx.write( 'starts with:' )
#ltx.write_block( sm_traj._timeseries[0] )
#if 1 in sm_traj._timeseries:
#    ltx.write_block( sm_traj._timeseries[1] )

ltx.write( 'flow: $%s$\n\n' % latex( latex_output.column_vector( [ sm_adap._flow[v] for v in sm_adap._vars ] ) ) )

ltx.write( 'flow at ', '$%s$'%latex( latex_output.column_vector( ad_init_state ) ), ': ', 
    '$%s$'%latex( latex_output.column_vector( ad_init( sm_adap._flow[v] ) for v in sm_adap._vars ) ),
    '\n\n' )

ltx.write( 'a values:' )
ltx.write_block( matrix( [ [ slv._lv_model._a_indexer[i][j] for j in sm_adap._popdyn_model._population_indices ] for i in sm_adap._popdyn_model._population_indices ] ) )
ltx.write_block( matrix( [ [ slv._lv_model._A_bindings( slv._lv_model._a_indexer[i][j] ) for j in sm_adap._popdyn_model._population_indices ] for i in sm_adap._popdyn_model._population_indices ] ) )
ltx.write( 'X values at time 0:' )
ltx.write_block( [ x == sm_traj._timeseries[0]( equil( x ) ) for x in smr.equilibrium_vars() ] )
ltx.write( 'sensitivity of $\hat{X}$:\n' )
ltx.write_equality(
    matrix( [ SR.symbol( 'kdjflkjdf', latex_name=r'\frac{\partial\hat{X}_i}{\partial u_{j0}}' ) ] ),
    matrix( [ [ sm_traj._timeseries[0]( diff( equil(x), u ) ) for u in sm_adap._vars ] for x in smr.equilibrium_vars() ] )
)

atp = Graphics()
for i in sm_adap._popdyn_model._population_indices:
    for j in sm_adap._popdyn_model._population_indices:
	atp += sm_traj.plot( 't', slv._lv_model._A_bindings( slv._lv_model._a_indexer[i][j] ),
	    color = (i == j and 'red' or 'green') )
atp.axes_labels( [ '$t$', '$a$' ] )
atp.save( 'large-a-vs-t.svg', figsize=(5,5) )

aap = lotkavolterra.plot_aij_with_arrows( sm_traj, slv, scale=0.05 )
aap.axes_labels( [ '$a_{ij}$', '$a_{ji}$' ] )
aap.save( 'large-a-vs-a.svg', figsize=(5,5) )

ltx.close()
exit(0r)

#large_adap.bind_in_place( fb )

print 'flow at initial conditions:', pred_prey_init( large_adap._flow )

ppp = Graphics()
for v, c, l in zip( large_adap._vars, ['blue', 'red'], ['prey $u_0$','predator $u_1$'] ):
    ppp += pred_prey_traj.plot( 't', v, color=c, legend_label=l )
ppp.save( 'large-pred-prey-adap.png',
    ticks=[100,pi],
    tick_formatter=[None,pi],
    figsize=(5,5)
)
ppp.save( 'large-pred-prey-adap.svg',
    ticks=[500,pi],
    tick_formatter=[None,pi],
    figsize=(3,3)
)

pred_prey_traj.plot( 't', 'u_0_a - u_0_b', legend_label='$u_0-u_1$' ).save(
    'large-pred-prey-adap-difference.png',
    ymin=0,
    ymax=3.2,
    ticks=[100,pi/2],
    tick_formatter=[None,pi],
    figsize=(5,5)
)

xs = large_adap._popdyn_model.equilibrium_vars()
ppx = Graphics()
for xhat in xs:
    ppx += pred_prey_traj.plot( 't', xhat, legend_label='$%s$'%latex(xhat) )
ppx.save( 'large-pred-prey-x-vs-t.png', figsize=(5,5) )

ltx.close()
</source-file>

<project-file filename=large-evol-plot.sage.out.tex/>

<project-file filename=large-a-vs-t.svg/>

<project-file filename=large-a-vs-a.svg/>
