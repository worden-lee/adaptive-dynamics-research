---
layout: page
title: "'Statistical Mechanics' adaptive dynamics model"
wmd_project: Selection_Gradients
---
[Sorry, self, I broke this page â˜¹ ]

Here we assign, for each $$(i,j)$$,

<source-file filename=statmech.py.step lang=python texdisplay=none>
from sage.all import * 
import os
import sys
sys.path.append( os.environ['SageUtils'] )
sys.path.append( os.environ['SageDynamics'] )
sys.path.append( os.environ['SageAdaptiveDynamics'] )
import latex_output
import dynamicalsystems
import adaptivedynamics

class vertex_indexer(dynamicalsystems.indexer):
    def init(self, x):
	self._f = x
    def __getitem__(self, tup):
	# tup is a tuple (vertex, number)
	v, i = tup
	return SR.symbol(
	    '%s_%s_%s' % (self._f, str(v), str(i)),
	    latex_name = '%s_{%s%s}' % (self._f, latex(v), latex(i))
	)

class vertex_indexer_2d(dynamicalsystems.indexer):
    def __init__(self, x):
	self._f = x
    def __getitem__(self, tupi):
        class vertex_indexer_2d_inner( dynamicalsystems.indexer ):
	    def __init__(self, x, tupi):
		self._f = x
		self._tupi = tupi
	    def __getitem__(self, tupj):
		# tup* is a tuple (vertex, number)
		v, i = self._tupi
		w, j = tupj
		return SR.symbol(
		    '_'.join( [self._f, str(v), str(i), str(w), str(j)] ),
		    latex_name = '%s_{%s%s%s%s}' % (self._f, latex(v), latex(i), latex(w), latex(j))
		)
	return vertex_indexer_2d_inner(self._f, tupi)

class a_indexer(dynamicalsystems.indexer):
    def __init__(self, model):
	self._model = model
    def __getitem__(self, i):
	class a_indexer_inner(dynamicalsystems.indexer):
	    def __init__(self, model, i):
		self._model = model
		self._i = i
	    def __getitem__(self, j):
		b,c,d = self._model._a_lookup[i[0]][j[0]]
		return b + c*self._model._u_indexer[i] + d*self._model._u_indexer[j]
	return a_indexer_inner( self._model, i )

class StatMechPopulation(dynamicalsystems.PopulationDynamicsSystem):
    def __init__(
	self,
	n=10,
	bindings=dynamicalsystems.Bindings()):
	# population indices in this model are tuples (lookup index, sequential number)
	self._u_indexer = vertex_indexer('u')
	self._r_indexer = dynamicalsystems.const_indexer(1)
	self._a_lookup = {}
	self._a_indexer = a_indexer(self)
	super(StatMechPopulation,self).__init__(
	    [], [], vertex_indexer('X'), bindings=bindings
	)
	self.generate_random_community(n)
    def flow(self):
	flo = {}
	for i in self._population_indices:
	    xi = self._population_indexer[i]
	    flo[xi] = self._r_indexer[i]*xi
	    for j in self._population_indices:
	        xj = self._population_indexer[j]
		flo[xi] += xi * xj * self._a_indexer[i][j]
	return flo
    def generate_random_community(self, n):
	for _ in range(n):
	    self.add_random_species()
    def add_random_species(self):
	try:
	    n = 1 + max( i[0] for i in self._population_indices )
	except ValueError: # empty sequence
	    n = 0
	import numpy
	self._a_lookup[n] = { n: (-1,0,0) }
	for i in self._population_indices:
	    bin = RDF(numpy.random.normal(0,1))
	    bni = RDF(numpy.random.normal(0,1))
	    c = 1
	    d = 1
	    theta = RDF(numpy.random.uniform(0,2*pi))
	    rho = RDF(numpy.random.uniform(0,2*pi))
	    self._a_lookup[i[0]][n] = (bin, c*cos(theta), d*cos(rho))
	    self._a_lookup[n][i[0]] = (bni, c*sin(theta), d*sin(rho))
	ni = (n,0)
	self.set_population_indices( self._population_indices + [ni] )
	return ni
    def mutate(self, index):
	i = 1 + max( i[1] for i in self._population_indices )
	sport = (index[0], i)
	self.set_population_indices( self._population_indices + [ sport ] )
	return sport
    def fake_population_index(self):
	return ('Fake', 0)
</source-file>

<source-file filename=statmech-assemble.sage.step lang=sage texdisplay=none>
# requires: statmech.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageUtils)/latex_output.py
# produces: statmech-assemble.sobj
from sage.all import *
from sage.misc.latex import _latex_file_

import statmech
import latex_output
import dynamicalsystems

set_random_seed(0)

N_pop = 1#5

smr = statmech.StatMechPopulation( 0 )

t = 0
state = dynamicalsystems.Bindings()
soln = dynamicalsystems.Trajectory( smr, [] )
while smr.n_populations() < N_pop:
    ni = smr.add_random_species()
    state[ smr._population_indexer[ni] ] = 1
    smu = smr.bind( { smr._u_indexer[i]:0 for i in smr._population_indices } )
    print 'go', t, 'to', t+100; sys.stdout.flush()
    ni_soln = smu.solve_gsl( [ state(x) for x in smu._vars ], start_time=t, end_time=t+100 )
    if any( abs(x)>1e+7 or math.isnan(x) for x in ni_soln._timeseries[-1].values() ):
	# it caused an explosion, back it out
	print ni, 'caused an explosion'
	smr.remove_population( ni )
	continue
    state = ni_soln._timeseries[-1]
    t = state('t')
    soln += ni_soln
    defunct = set( [ i for i in smr._population_indices if ni_soln._timeseries[-1]( smr._population_indexer[i] ) < 0.001 ] )
    if len(defunct) > 0:
        print 'extinctions:', defunct
        smr.remove_populations( defunct )

del smu
del ni_soln
save_session( 'statmech-assemble' )
</source-file>

<source-file filename=statmech-assemble-plot.sage.step lang=sage texdisplay=none>
# requires: statmech.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageUtils)/latex_output.py
# requires: statmech-assemble.sobj
# produces: statmech-assemble.sage.out.tex statmech-assemble.svg
from sage.all import *
from sage.misc.latex import _latex_file_

import statmech
import latex_output
import dynamicalsystems

load_session( 'statmech-assemble' )

ltx = latex_output.latex_output( 'statmech-assemble.sage.out.tex' )

ltx.write( smr )

ltx.close()

soln.plot( 't', smr._vars, ylabel='$X$' ).save( filename='statmech-assemble.svg' )
</source-file>

<project-file filename=statmech-assemble.sage.out.tex/>

<project-file filename=statmech-assemble.svg/>

<source-file filename=statmech-evol.sage.step lang=sage texdisplay=none>
# requires: statmech.py
# requires: $(SageUtils)/latex_output.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py
# requires: lotkavolterra.py
# requires: statmech-assemble.sobj
# produces: statmech-evol.sobj
from sage.all import *
from sage.misc.latex import _latex_file_

import statmech
import latex_output
import dynamicalsystems
import adaptivedynamics
import lotkavolterra

load_session( 'statmech-assemble' )

ltx = latex_output.latex_output( 'statmech-evol.sage.out.tex' )

def lv_interior_equilibrium( popdyn ):
    import sympy
    eqns = [ sympy.sympify( popdyn.add_hats()( (popdyn._flow[x]/x).simplify_rational() ) ) for x in popdyn._vars ]
    print eqns; sys.stdout.flush()
    #eqs = solve( eqns, *popdyn.equilibrium_vars(), solution_dict=True )
    eqs = sympy.solve( eqns, *popdyn.equilibrium_vars() )
    return dynamicalsystems.Bindings( { x: eqs[ sympy.sympify(x) ] for x in popdyn.equilibrium_vars() } )

u_init = dynamicalsystems.Bindings( { smr._u_indexer[i]:0 for i in smr._population_indices } )

equil = lv_interior_equilibrium( smr )
eq0 = dynamicalsystems.Bindings( equil )
#equil = smr.interior_equilibria()
print 'equil:', eq0
print 'equil at u=0:', u_init( eq0 )

sm_adap = adaptivedynamics.AdaptiveDynamicsModel( 
    smr,
    [ smr._u_indexer ],
    #early_bindings=fb,
    equilibrium = eq0
).bind( { 'gamma':1 } )

ltx.write( 'Adaptive dynamics of model:\n', sm_adap )

ad_init = dynamicalsystems.Bindings( { u:0 for u in sm_adap._vars } )
ad_init_state = [ ad_init(u) for u in sm_adap._vars ]

sm_traj = sm_adap.solve( ad_init_state, end_time=10, step=0.01 )

slv = lotkavolterra.LotkaVolterraAdaptiveDynamics( sm_adap,
	r_name_indexer=statmech.vertex_indexer('r'),
        a_name_indexer=statmech.vertex_indexer_2d('a') )

ltx.close()

save_session('statmech-evol')
</source-file>

<source-file filename="statmech-evol-plot.sage.step" texdisplay=none>
# requires: statmech-evol.sobj
# produces: statmech-evol-plot.sage.out.tex 
# produces: statmech-a-vs-t.svg statmech-a-vs-a.svg
from sage.all import *
from sage.misc.latex import _latex_file_
from sage.misc.latex import latex

import statmech
import latex_output
import dynamicalsystems
import adaptivedynamics
import lotkavolterra

# create variables with custom latex names because load_session
# creates them wrong: http://trac.sagemath.org/ticket/17559
#for x in ('X_0', 'X_i', 'R_0'): hat(SR.symbol(x))
#SR.symbol( 'c_0_0', latex_name='c_{00}' )
#SR.symbol( 'c_i_0', latex_name='c_{i0}' )

load_session("statmech-evol")

ltx = latex_output.latex_output( 'statmech-evol-plot.sage.out.tex' )

#ltx.write( 'sm\_traj t:', [ ts('t') for ts in sm_traj._timeseries ], '\n\n' )
#ltx.write( 'starts with:' )
#ltx.write_block( sm_traj._timeseries[0] )
#if 1 in sm_traj._timeseries:
#    ltx.write_block( sm_traj._timeseries[1] )

ltx.write( 'flow: $%s$\n\n' % latex( latex_output.column_vector( [ sm_adap._flow[v] for v in sm_adap._vars ] ) ) )

ltx.write( 'flow at ', '$%s$'%latex( latex_output.column_vector( ad_init_state ) ), ': ', 
    '$%s$'%latex( latex_output.column_vector( ad_init( sm_adap._flow[v] ) for v in sm_adap._vars ) ),
    '\n\n' )

ltx.write( 'a values:' )
ltx.write_block( matrix( [ [ slv._lv_model._a_indexer[i][j] for j in sm_adap._popdyn_model._population_indices ] for i in sm_adap._popdyn_model._population_indices ] ) )
ltx.write_block( matrix( [ [ slv._lv_model._A_bindings( slv._lv_model._a_indexer[i][j] ) for j in sm_adap._popdyn_model._population_indices ] for i in sm_adap._popdyn_model._population_indices ] ) )
ltx.write( 'X values at time 0:' )
ltx.write_block( [ x == sm_traj._timeseries[0]( equil( x ) ) for x in smr.equilibrium_vars() ] )
ltx.write( 'sensitivity of $\hat{X}$:\n' )
ltx.write_equality(
    matrix( [ SR.symbol( 'kdjflkjdf', latex_name=r'\frac{\partial\hat{X}_i}{\partial u_{j0}}' ) ] ),
    matrix( [ [ sm_traj._timeseries[0]( diff( equil(x), u ) ) for u in sm_adap._vars ] for x in smr.equilibrium_vars() ] )
)

atp = Graphics()
for i in sm_adap._popdyn_model._population_indices:
    for j in sm_adap._popdyn_model._population_indices:
	atp += sm_traj.plot( 't', slv._lv_model._A_bindings( slv._lv_model._a_indexer[i][j] ),
	    color = (i == j and 'red' or 'green') )
atp.axes_labels( [ '$t$', '$a$' ] )
atp.save( 'statmech-a-vs-t.svg', figsize=(5,5) )

aap = lotkavolterra.plot_aij_with_arrows( sm_traj, slv, scale=0.05 )
aap.axes_labels( [ '$a_{ij}$', '$a_{ji}$' ] )
aap.save( 'statmech-a-vs-a.svg', figsize=(5,5) )

ltx.close()
exit(0r)

#statmech_adap.bind_in_place( fb )

print 'flow at initial conditions:', pred_prey_init( statmech_adap._flow )

ppp = Graphics()
for v, c, l in zip( statmech_adap._vars, ['blue', 'red'], ['prey $u_0$','predator $u_1$'] ):
    ppp += pred_prey_traj.plot( 't', v, color=c, legend_label=l )
ppp.save( 'statmech-pred-prey-adap.png',
    ticks=[100,pi],
    tick_formatter=[None,pi],
    figsize=(5,5)
)
ppp.save( 'statmech-pred-prey-adap.svg',
    ticks=[500,pi],
    tick_formatter=[None,pi],
    figsize=(3,3)
)

pred_prey_traj.plot( 't', 'u_0_a - u_0_b', legend_label='$u_0-u_1$' ).save(
    'statmech-pred-prey-adap-difference.png',
    ymin=0,
    ymax=3.2,
    ticks=[100,pi/2],
    tick_formatter=[None,pi],
    figsize=(5,5)
)

xs = statmech_adap._popdyn_model.equilibrium_vars()
ppx = Graphics()
for xhat in xs:
    ppx += pred_prey_traj.plot( 't', xhat, legend_label='$%s$'%latex(xhat) )
ppx.save( 'statmech-pred-prey-x-vs-t.png', figsize=(5,5) )

ltx.close()
</source-file>

<project-file filename=statmech-evol-plot.sage.out.tex/>

<project-file filename=statmech-a-vs-t.svg/>

<project-file filename=statmech-a-vs-a.svg/>
