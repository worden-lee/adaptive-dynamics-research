---
layout: page
title: "Comparison of Logistic Growth and Resource Competition Models"
wmd_project: Selection_Gradients
---

In the monomorphic [Macarthur-Levins model](MacLev-1-1.html) the population
dynamics is

$$\frac{dX}{dt} = b(u) X (c(u) w (K - \frac{c(u) X}{r}) - m(u))$$

so that

$$\mathbf{A}(u) = \begin{pmatrix} r \\ a_{00} \end{pmatrix} = \begin{pmatrix} b(u)\left(c(u) w K - m(u)\right) \\ b(u) \frac{c(u)^2 w}{r} \end{pmatrix}$$.

<!--
Here I'm interested in the situation where evolution in $$c(u)$$ tends
to intensify competition, so let's hold $$b$$ and $$m$$ constant.  In this
case

$$\partial_1\mathbf{A}(u) = \begin{pmatrix} b w K \\ -b\frac{c(u)w}{r} \end{pmatrix}$$.
-->

As we've seen, for some, though, not all, choices of functions $$b$$,
$$m$$, and $$c$$, adaptive increase in $$c$$ drives the competition
term $$a_{00}$$ away from zero in the negative direction.  This is because
adaptation in this system tends to increase the Lotka-Volterra intrinsic
growth term at the expense of the competition term.

It should be possible to analyze this situation geometrically, in terms
of motion of a point on a curve in the $$\mathbf{A}$$ plane, in which 
the motion is driven by the $$k$$ component of the selection gradient,
against the $$a$$ component.

I would like to compare this to the dynamics of $$K$$ selection in the
logistic growth model, in which selection on the $$K$$ character of a
population tends to *decrease* competition.

The interaction selection gradient $$\mathbf{S}(\mathbf{A})$$ is the
same for all monomorphic Lotka-Volterra models, concerned only with
selection on the Lotka-Volterra coefficients $$k$$ and $$a$$ regardless
of their functional form in terms of population phenotypes.  The
interaction selection gradient vector field is

$$\mathbf{S}(\mathbf{A}) = \begin{pmatrix} 1 \\ -a/k \end{pmatrix}$$.

The selection gradient is perpendicular to a neutral-invasion-exponent
curve that divides the plane into viable and inviable halves at each
point.

<source-file filename=logistic-S-A-curves.sage.step display=logistic-S-A-curves.png>
# produces: logistic-S-A-curves.png S-A-vf.sobj
var('a k')
outer = 3
SA = vector( [ 1, -a/k ] )
SAvf = plot_vector_field( [1, -a/k], [k,0,outer], [a,-outer,0], color='red', figsize=(5,5), frame=false );
# invasion-neutral curves are perpendicular to the gradient:
# (slope) da/dk = k/a
# a da = k dk
# a^2 = k^2 + C
# a = \pm \sqrt(k^2 + C)
var('s')
from numpy import arange
for k,a in sum( ( [ (s,0), (0,-s) ] for s in arange(0.5,3,0.25) ), [ (0,0) ] ):
    C = a^2 - k^2
    SAvf += plot( (s, -sqrt(s^2+C)), (s, 0, outer), parametric=True, color='gray', thickness=0.1, ymin=-outer )
SAvf.axes_labels( [ '$k$', '$a$' ] );
SAvf.save( 'logistic-S-A-curves.png' );

save_session( 'S-A-vf' )
</source-file>

Here is the $$(k,a)$$ curve for the monomorphic resource competition
model, with $$b$$ and $$m$$ fixed, showing the motion through the
plane due to change in $$c$$.

<source-file filename=maclev-S-A-curve.sage.step display=maclev-S-A-curve.png>
# requires: maclevmodels.py maclev-1-1-mc-adap-geom.sobj
# requires: S-A-vf.sobj
# produces: maclev-S-A-curve.png
# produces: maclev-S-A-more-curve.png
from dynamicalsystems import *

load_session( 'S-A-vf.sobj' )
#load_session( 'maclev-1-1-mc-adap-geom' )
#var( 'b c m w r K gamma' )
#maclev_curve = fixed_parameter_bindings( c00_bindings(
#    vector( [ K_0 * b_0 * c * w_0 - b_0 * m_0, - b_0 * c * c * w_0 / r_0 ] )
#) )
#maclev_d1a = fixed_parameter_bindings( c00_bindings(
#    vector( [ K_0 * b_0 * w_0, - c * b_0 * w_0 / r_0 ] )
#) )

var( 'a k u u_1 r K w' )
idu = u.function(u)
u1 = SR(1).function(u)
def_bindings = Bindings( r=1, K=2, w=1, gamma=1 ) + FunctionBindings( { (v,(u,)):SR(1) for v in ('b','c','m') } )
b = function('b',u).function(u)
m = function('m',u).function(u)
c = function('c',u).function(u)
maclev_AK_bindings = Bindings( k=b(u)*(K*c(u)*w - m(u)), a=-b(u)*c(u)*c(u_1)*w/r )
uu_bindings = Bindings( u_1=u )
maclev_raw_ak = maclev_AK_bindings( vector( [k, a] ) )
maclev_curve_form = uu_bindings( maclev_raw_ak )
maclev_d1a_form = uu_bindings( diff( maclev_raw_ak, u ) )
maclev_d1a_vf = maclev_d1a_form * sign(maclev_d1a_form*uu_bindings(maclev_AK_bindings(SA))) / maclev_d1a_form.norm(2)

print 'maclev curve', maclev_curve_form
print 'maclev_d1a:', maclev_d1a_form
print 'd1a vf:', maclev_d1a_vf

def plot_v_curve( _bindings, urange ):
    bindings = def_bindings + _bindings
    print 'bindings:', bindings
    return (
	plot( bindings(maclev_curve_form), urange, color='black', parametric=True ) + 
	plot_vector_field_on_curve( bindings(maclev_d1a_vf), bindings(maclev_curve_form), urange, color='green', frame=False )
    )

print 'try curve:', (def_bindings + FunctionBindings( c=u.function(u) ))( maclev_curve_form )

maclev_SA = SAvf
maclev_SA += plot_v_curve( FunctionBindings( c=u.function(u) ), (u,0.55,2) )
maclev_SA += plot_v_curve( FunctionBindings( { ('c',(u,)):u, ('m',(u,)):SR(2) } ), (u,1.05,2) )
maclev_SA += plot_v_curve( FunctionBindings( { ('c',(u,)):u, ('m',(u,)):SR(1/2) } ), (u,0.3,2) )

evc = FunctionBindings( c=u.function(u), b=SR('b'), m=SR('m') )
print 'd1a on c(u):', evc( maclev_d1a_form )

# pity about the labels
# wouldn't want anything to happen to them
maclev_SA.axes_labels( [ '$k$', '$a$' ] );
maclev_SA.save( 'maclev-S-A-curve.png', figsize=(5,5) )

# again with some other functions
maclev_SA = SAvf
maclev_SA += plot_v_curve( FunctionBindings( { ('c',(u,)):SR(1), ('m',(u,)):u } ), (u,0.85,2) )
maclev_SA += plot_v_curve( FunctionBindings( { ('c',(u,)):u, ('m',(u,)):1/u } ), (u,0.8,2) )
# pity about the labels
# wouldn't want anything to happen to them
maclev_SA.axes_labels( [ '$k$', '$a$' ] );
maclev_SA.save( 'maclev-S-A-more-curve.png', figsize=(5,5) )
</source-file>

And some other choices of $$c$$, $$m$$, $$b$$:

<project-file filename=maclev-S-A-more-curve.png/>

This appears to be a case of competition worsening due to a tragedy of the
commons; specifically, where adaptation is driven by the vector
$$\partial_1\mathbf{A}$$ pointing into the viable half plane while the
resultant direction of motion $$d\mathbf{A}/dt$$ is near but below the
line, and drags the population into worsening conditions.

TODO here: verify that

* $$\partial_1\mathbf{A}$$ is as shown, and above the gray line in all places
* It's very close to neutral
* The marginal-viability measure $$k/a$$ is actually decreasing where it looks like it is

## $$K$$ selection in the logistic model

This model is

$$\frac{dX}{dt} = r(u) X (1 - \frac{X}{K(u)})$$,

so that

$$\mathbf{A}(u) = \begin{pmatrix} r(u) \\ -\frac{r(u)}{K(u)} \end{pmatrix}$$,

with

$$\partial_1\mathbf{A}(u) = \begin{pmatrix} r'(u) \\ \frac{r(u)K'(u)-r'(u)K(u)}{K(u)^2} \end{pmatrix}$$.

See [paper.html](the paper draft) for logistic model details.

In this model, the direction of invasion (?) $$\partial_1\mathbf{A}$$ is
always collinear with $$d\mathbf{A}/dt$$, so there is no tragedy and
adaptation always increases $$k/a$$.

<source-file filename=logistic-S-A-curve.sage.step display=logistic-S-A-curve.png>
# requires: S-A-vf.sobj
# produces: logistic-S-A-curve.png
from dynamicalsystems import *
from sage.symbolic.function_factory import function

load_session( 'S-A-vf.sobj' )
var( 'a k u' )
r = function('r', u)
K = function('K', u)
verhulst_AK_bindings = Bindings( k=r, a=-r/K )
verhulst_curve_form = verhulst_AK_bindings( vector( [k, a] ) )
verhulst_d1a_form = diff( verhulst_curve_form, u ) #vector( [ diff(r), diff(-r/K) ] )
verhulst_d1a_vf = verhulst_d1a_form * sign(verhulst_d1a_form*verhulst_AK_bindings(SA)) / verhulst_d1a_form.norm(2)

def plot_v_curve( bindings, urange ):
    return (
	plot( bindings(verhulst_curve_form), urange, color='black', parametric=True ) + 
	plot_vector_field_on_curve( bindings(verhulst_d1a_vf), bindings(verhulst_curve_form), urange, color='blue', frame=False )
    )

verhulst_SA = SAvf
verhulst_SA += plot_v_curve( FunctionBindings( r=SR(1), K=u ), (u,1/3,5) )
verhulst_SA += plot_v_curve( FunctionBindings( r=u, K=u ), (u,0,3) )
verhulst_SA += plot_v_curve( FunctionBindings( r=1/u+1, K=u ), (u,1/sqrt(3),3) )
verhulst_SA += plot_v_curve( FunctionBindings( r=1/u, K=u ), (u,1/sqrt(3),3) )

# pity about the labels
# wouldn't want anything to happen to them
verhulst_SA.axes_labels( [ '$k$', '$a$' ] );
verhulst_SA.save( 'logistic-S-A-curve.png', figsize=(5,5) )

</source-file>
