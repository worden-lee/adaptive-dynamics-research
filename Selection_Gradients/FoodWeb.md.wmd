---
layout: page
title: "Evolution in a Food Web"
wmd_project: Selection_Gradients
---
Evolution in a food web!  Is it arms-race-like?

We provide a directed graph representing the food web. Node labels are species names, and arrow labels are strength of predation.  Let's say the conversion factor from prey to predator is constant $$c$$.

Then species $$i$$'s dynamics is

$$\frac{dX_i}{dt} = (r_i + k \sum_{j\to i} f_{ji}X_j - \sum_{i\to j} f_{ij}X_j) X_i$$

where

$$f_{ij} = f(u_i,u_j)$$ is some function of the two phenotypes controlling how well $$j$$ eats $$i$$; 

$$u_i$$ is the phenotype of species $$i$$; and

$$r_i = (0\text{ if }i\text{ is a predator, }1\text{ else})$$.

This will induce the usual dynamics of apparent competition, and adaptive dynamics of all the $$u_i$$ follows.

<source-file filename=foodweb.py.step lang=python>
from sage.all import * 
import os
import sys
sys.path.append( os.environ['SageUtils'] )
sys.path.append( os.environ['SageDynamics'] )
sys.path.append( os.environ['SageAdaptiveDynamics'] )
import latex_output
import dynamicalsystems
import adaptivedynamics

class vertex_indexer(dynamicalsystems.indexer):
    def init(self, x):
	self._f = x
    def __getitem__(self, tup):
	# tup is a tuple (vertex, number)
	v, i = tup
	return SR.symbol(
	    '%s_%s_%s' % (self._f, str(i), str(v)),
	    latex_name = '%s_{%s%s}' % (self._f, latex(i), latex(v))
	)

class vertex_indexer_2d(dynamicalsystems.indexer):
    def __init__(self, x):
	self._f = x
    def __getitem__(self, tupi):
        class vertex_indexer_2d_inner( dynamicalsystems.indexer ):
	    def __init__(self, x, tupi):
		self._f = x
		self._tupi = tupi
	    def __getitem__(self, tupj):
		# tup* is a tuple (vertex, number)
		v, i = self._tupi
		w, j = tupj
		return SR.symbol(
		    '_'.join( [self._f, str(i), str(v), str(j), str(w)] ),
		    latex_name = '%s_{%s%s%s%s}' % (self._f, latex(i), latex(v), latex(j), latex(w))
		)
	return vertex_indexer_2d_inner(self._f, tupi)

class FoodWebModel(dynamicalsystems.PopulationDynamicsSystem):
    def __init__(
	self,
	graph,
	bindings=dynamicalsystems.Bindings()):
	self._graph = graph
	# population indices in this model are tuples (vertex, sequential number)
	x_indices = [ (v,0) for v in graph.vertices() ]
        pop_indexer = vertex_indexer('X')
	self._u_indexer = vertex_indexer('u')
	super(FoodWebModel,self).__init__(
	    [], x_indices, pop_indexer, bindings=bindings
	)
    def flow(self):
	inflo = { v: 0 for v in self._vars }
	outflo = { v: 0 for v in self._vars }
	basal = self._graph.sources()
	print 'basal:', basal
	k = self._bindings( 'k' )
	for i in self._population_indices:
	    xi = self._population_indexer[i]
	    for j in self._population_indices:
	        xj = self._population_indexer[j]
		if i != j and self._graph.has_edge( j[0], i[0] ):
		    axx = self._a( i, j ) * xi * xj
		    outflo[ xj ] += axx
		    inflo[ xi ] += k * axx
		if i[0] in basal and j[0] in basal:
		    outflo[ xj ] += xi*xj
	    if inflo[xi] == 0:
		inflo[xi] += self._bindings( 'r' ) * xi
	    else:
		outflo[xi] += self._bindings( 'm' ) * xi
	return {
	    v : self._bindings( inflo[v] - outflo[v] ) for v in inflo.keys()
	}
    def _a(self, i, j):
	from sage.symbolic.function_factory import function
	return function('a')( self._u_indexer[i], self._u_indexer[j] )
    def mutate(self, index):
	i = 1 + max( i[1] for i in self._population_indices )
	sport = (index[0], i)
	self.set_population_indices( self._population_indices + [ sport ] )
	return sport
    def fake_population_index(self):
	return ('Fake', 0)
    def plot_tikz(self, filename):
	from sage.misc.latex import _latex_file_
	LF = open( filename, 'w' )
	# put all arrows pointing upward
	self._graph.set_pos( self._graph.layout_acyclic() )
	LF.write( _latex_file_( self._graph, title='' ) )
	LF.close()
</source-file>

<source-file filename=foodweb.sage.step lang=sage>
# requires: foodweb.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py
# requires: $(SageUtils)/latex_output.py
# produces: foodweb.sobj foodweb.sage.out.tex foodweb.tikz.tex
from sage.all import * 
from sage.misc.latex import _latex_file_

import foodweb
import latex_output
import dynamicalsystems
import adaptivedynamics

ltx = latex_output.latex_output( 'foodweb.sage.out.tex' )

# now that I've defined the general resource-competition model, let's
# create a 1-resource, 1-population instantiation to work with
var('a b')
foodweb_pred_prey = foodweb.FoodWebModel(
    DiGraph( { a:[b] } ),
    bindings = dynamicalsystems.Bindings( { 'r':1, 'k':9/10, 'm':1 } ) + dynamicalsystems.FunctionBindings( { 'a':SR('1 + cos( u - v )').function(SR('u'),SR('v')) } )
);

ltx.write( 'The foodweb model:' )
ltx.write_block( foodweb_pred_prey )

foodweb_pred_prey.plot_tikz( 'foodweb.tikz.tex' )

#ltx.close()
#save_session('foodweb')
#sys.exit( 0r )

equil = foodweb_pred_prey.interior_equilibria()
print equil

foodweb_adap = adaptivedynamics.AdaptiveDynamicsModel( 
    foodweb_pred_prey,
    [ foodweb_pred_prey._u_indexer ],
    equilibrium = dynamicalsystems.Bindings( equil[0] )
).bind( { 'gamma':1 } )

ltx.write( 'Adaptive dynamics of model:\n', foodweb_adap )
#ltx.write_environment( 'align*', [ '\\\\\n  '.join( r'\frac{d%s}{dt} &\propto %s' % (latex(v), latex(foodweb_adap._S[v])) for v in foodweb_adap._vars ) ] )

pred_prey_init = dynamicalsystems.Bindings( { 'u_0_a':0.1, 'u_0_b':0 } )

ltx.write( 'flow at ', '$%s$'%latex( latex_output.column_vector( [ pred_prey_init( v ) for v in foodweb_adap._vars ] ) ), ': ',
    '$%s$'%latex( latex_output.column_vector( pred_prey_init( foodweb_adap._flow[v] ) for v in foodweb_adap._vars ) ) )

ltx.close()

save_session('foodweb')
</source-file>

<project-file filename=foodweb.tikz.crop.svg/>

<project-file filename=foodweb.sage.out.html/>

<source-file filename="foodweb.plot.sage.step">
# requires: foodweb.sobj
# requires: $(SageDynamics)/dynamicalsystems.py $(SageAdaptiveDynamics)/adaptivedynamics.py
# requires: $(SageUtils)/latex_output.py
# produces: foodweb.plot.sage.out.tex foodweb-pred-prey-adap.png
# produces: foodweb-pred-prey-a-vs-t.png foodweb-pred-prey-a-vs-a.png
# produces: foodweb-pred-prey-x-vs-t.png
from sage.all import *
from sage.misc.latex import _latex_file_
from sage.misc.latex import latex

import foodweb
import latex_output
import dynamicalsystems
import adaptivedynamics
import lotkavolterra

# create variables with custom latex names because load_session
# creates them wrong: http://trac.sagemath.org/ticket/17559
#for x in ('X_0', 'X_i', 'R_0'): hat(SR.symbol(x))
#SR.symbol( 'c_0_0', latex_name='c_{00}' )
#SR.symbol( 'c_i_0', latex_name='c_{i0}' )

load_session("foodweb")

ltx = latex_output.latex_output( 'foodweb.plot.sage.out.tex' )

pred_prey_traj = foodweb_adap.solve( [ pred_prey_init( v ) for v in foodweb_adap._vars ], end_time=400 ) #, step=0.003 )

ppp = Graphics()
for v, c in zip( foodweb_adap._vars, ['blue', 'red'] ):
    ppp += pred_prey_traj.plot( 't', v, color=c )
ppp.save( 'foodweb-pred-prey-adap.png', figsize=(5,5) )

xs = foodweb_adap._popdyn_model.equilibrium_vars()
ppx = Graphics()
for xhat in xs:
    ppx += pred_prey_traj.plot( 't', xhat, legend_label='$%s$'%latex(xhat) )
ppx.save( 'foodweb-pred-prey-x-vs-t.png', figsize=(5,5) )

flv = lotkavolterra.LotkaVolterraAdaptiveDynamics( foodweb_adap,
	r_name_indexer=foodweb.vertex_indexer('r'),
        a_name_indexer=foodweb.vertex_indexer_2d('a') )

atp = Graphics()
for i in foodweb_adap._popdyn_model._population_indices:
    for j in foodweb_adap._popdyn_model._population_indices:
	atp += pred_prey_traj.plot( 't', flv._lv_model._A_bindings( flv._lv_model._a_indexer[i][j] ),
	    color = (i == j and 'red' or 'green') )
atp.save( 'foodweb-pred-prey-a-vs-t.png', figsize=(5,5) )

lotkavolterra.plot_aij_with_arrows( pred_prey_traj, flv, 'foodweb-pred-prey-a-vs-a.png' )

ltx.close()
</source-file>

<project-file filename=foodweb-pred-prey-adap.png/>

<project-file filename=foodweb-pred-prey-x-vs-t.png/>

<project-file filename=foodweb-pred-prey-a-vs-t.png/>

<project-file filename=foodweb-pred-prey-a-vs-a.png/>

<source-file filename=foodweb-2-2.sage.step lang=sage>
# requires: foodweb.py
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageAdaptiveDynamics)/adaptivedynamics.py
# requires: $(SageUtils)/latex_output.py
# produces: foodweb-2-2.sobj foodweb-2-2.sage.out.tex foodweb-2-2.tikz.tex
from sage.all import * 
from sage.misc.latex import _latex_file_

import foodweb
import latex_output
import dynamicalsystems
import adaptivedynamics

ltx = latex_output.latex_output( 'foodweb-2-2.sage.out.tex' )

# now that I've defined the general resource-competition model, let's
# create a 1-resource, 1-population instantiation to work with
var('R_0 R_1 P_0 P_1')
foodweb_2_2 = foodweb.FoodWebModel(
    DiGraph( { R_0:[P_0,P_1], R_1:[P_0,P_1] } ),
    bindings = dynamicalsystems.Bindings( { 'r':1, 'k':9/10, 'm':1 } ) + dynamicalsystems.FunctionBindings( { 'a':SR('1 + cos( u - v )').function(SR('u'),SR('v')) } )
);

ltx.write( 'The foodweb model:' )
ltx.write_block( foodweb_2_2 )

foodweb_2_2.plot_tikz( 'foodweb-2-2.tikz.tex' )

#ltx.close()
#save_session('foodweb-2-2')
#sys.exit( 0r )

equil = foodweb_2_2.interior_equilibria()
print equil

foodweb_adap = adaptivedynamics.AdaptiveDynamicsModel( 
    foodweb_2_2,
    [ foodweb_2_2._u_indexer ],
    equilibrium = dynamicalsystems.Bindings( equil[0] )
).bind( { 'gamma':1 } )

ltx.write( 'Adaptive dynamics of model:\n', foodweb_adap )
#ltx.write_environment( 'align*', [ '\\\\\n  '.join( r'\frac{d%s}{dt} &\propto %s' % (latex(v), latex(foodweb_adap._S[v])) for v in foodweb_adap._vars ) ] )

init_2_2 = dynamicalsystems.Bindings( { 'u_0_R_0':-0.2, 'u_0_R_1':0, 'u_0_P_0':-0.1, 'u_0_P_1':0.2 } ) 

ltx.write( 'flow at ', '$%s$'%latex( latex_output.column_vector( [ init_2_2( v ) for v in foodweb_adap._vars ] ) ), ': ',
    '$%s$'%latex( latex_output.column_vector( init_2_2( foodweb_adap._flow[v] ) for v in foodweb_adap._vars ) ) )

ltx.close()

traj_2_2 = foodweb_adap.solve( [ init_2_2( v ) for v in foodweb_adap._vars ], end_time=30 ) #, step=0.003 )

save_session('foodweb-2-2')
</source-file>

<project-file filename=foodweb-2-2.tikz.crop.svg/>

<project-file filename=foodweb-2-2.sage.out.html/>

<source-file filename="foodweb-2-2.plot.sage.step">
# requires: foodweb-2-2.sobj
# requires: $(SageDynamics)/dynamicalsystems.py $(SageAdaptiveDynamics)/adaptivedynamics.py
# requires: $(SageUtils)/latex_output.py lotkavolterra.py
# produces: foodweb-2-2.plot.sage.out.tex foodweb-2-2-adap.png
# produces: foodweb-2-2-a-vs-a.png foodweb-2-2-a-vs-t.png
from sage.all import *
from sage.misc.latex import _latex_file_
from sage.misc.latex import latex

import foodweb
import latex_output
import dynamicalsystems
import adaptivedynamics
import lotkavolterra

load_session("foodweb-2-2")

ltx = latex_output.latex_output( 'foodweb-2-2.plot.sage.out.tex' )

ppp = Graphics()
for v, c in zip( foodweb_adap._vars, ['blue', 'red', 'purple', 'orange'] ):
    ppp += traj_2_2.plot( 't', v, color=c )
ppp.save( 'foodweb-2-2-adap.png', figsize=(5,5) )

flv = lotkavolterra.LotkaVolterraAdaptiveDynamics( foodweb_adap,
	r_name_indexer=foodweb.vertex_indexer('r'),
        a_name_indexer=foodweb.vertex_indexer_2d('a') )

atp = Graphics()
for i in foodweb_adap._popdyn_model._population_indices:
    for j in foodweb_adap._popdyn_model._population_indices:
	atp += traj_2_2.plot( 't', flv._lv_model._A_bindings( flv._lv_model._a_indexer[i][j] ),
	    color = (i == j and 'red' or 'green') )
atp.save( 'foodweb-2-2-a-vs-t.png', figsize=(5,5) )

lotkavolterra.plot_aij_with_arrows( traj_2_2, flv, 'foodweb-2-2-a-vs-a.png' )

ltx.close()
</source-file>

<project-file filename=foodweb-2-2-adap.png/>

<project-file filename=foodweb-2-2-a-vs-a.png/>

<project-file filename=foodweb-2-2-a-vs-t.png/>

