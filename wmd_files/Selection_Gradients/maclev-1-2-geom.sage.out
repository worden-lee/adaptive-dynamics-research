set_population_indices: [0, 1]
set_population_indices: [0, 1]
set_population_indices: [0, 1]
set_population_indices: [0, 1]
set_population_indices: [0]
set_population_indices: [0]
set_population_indices: [0]
set_population_indices: [0]
(c_0, u_0 |--> e^(-3*u_0^2)) as tuple:expr?
(c_0, u_0 |--> e^(-3*u_0^2)) as expr:function?
{('c_0', (u_0,)): u_0 |--> e^(-3*u_0^2)}
(b, 1) as tuple:expr?
(b, 1) as expr:function?
{('b', ()): 1}
(c_1, u_0 |--> e^(-3*(u_0 - 1)^2)) as tuple:expr?
(c_1, u_0 |--> e^(-3*(u_0 - 1)^2)) as expr:function?
{('c_1', (u_0,)): u_0 |--> e^(-3*(u_0 - 1)^2)}
(m, 1) as tuple:expr?
(m, 1) as expr:function?
{('m', ()): 1}
ad bindings: {K_0 -> 2, m_3 -> 1, c_0_1 -> e^(-3*(u_0 - 1)^2), r_1 -> 1, b_1 -> 1, c_2_0 -> e^(-3*u_2^2), c_2_1 -> e^(-3*(u_2 - 1)^2), K_1 -> 2, c_1_0 -> e^(-3*u_1^2), Rhat_0 -> -Xhat_0*e^(-3*u_0^2) + 2, c_1_1 -> e^(-3*(u_1 - 1)^2), gamma -> 1, b_0 -> 1, Rhat_1 -> -Xhat_0*e^(-3*(u_0 - 1)^2) + 2, b_2 -> 1, m_1 -> 1, c_0_0 -> e^(-3*u_0^2), w_1 -> 1, b_3 -> 1, R_0 -> -X_0*e^(-3*u_0^2) + 2, r_0 -> 1, m_2 -> 1, w_0 -> 1, m_0 -> 1, R_1 -> -X_0*e^(-3*(u_0 - 1)^2) + 2, {c_1(u_0) -> e^(-3*(u_0 - 1)^2), b() -> 1, m() -> 1, c_0(u_0) -> e^(-3*u_0^2)}}
model bindings: {R_0 -> -(X_0*c_0_0 + X_1*c_1_0 - K_0*r_0)/r_0, Rhat_1 -> -(Xhat_0*c_0_1 + Xhat_1*c_1_1 - K_1*r_1)/r_1, Rhat_0 -> -(Xhat_0*c_0_0 + Xhat_1*c_1_0 - K_0*r_0)/r_0, R_1 -> -(X_0*c_0_1 + X_1*c_1_1 - K_1*r_1)/r_1, {}}
_early_bindings: {b_0 -> b(u_0), c_1_0 -> c_0(u_1), c_0_1 -> c_1(u_0), b_2 -> b(u_2), m_2 -> m(u_2), b_1 -> b(u_1), c_2_0 -> c_0(u_2), m_1 -> m(u_1), m_0 -> m(u_0), c_0_0 -> c_0(u_0), c_1_1 -> c_1(u_1), c_2_1 -> c_1(u_2), {}}
_late_bindings: {gamma -> 1, w_1 -> 1, b_3 -> 1, K_1 -> 2, b_0 -> 1, c_1_0 -> e^(-3*u_1^2), K_0 -> 2, c_0_1 -> e^(-3*(u_0 - 1)^2), r_0 -> 1, b_2 -> 1, r_1 -> 1, m_2 -> 1, b_1 -> 1, c_2_0 -> e^(-3*u_2^2), w_0 -> 1, m_1 -> 1, m_0 -> 1, m_3 -> 1, c_0_0 -> e^(-3*u_0^2), c_1_1 -> e^(-3*(u_1 - 1)^2), c_2_1 -> e^(-3*(u_2 - 1)^2), {c_1(u_0) -> e^(-3*(u_0 - 1)^2), b() -> 1, m() -> 1, c_0(u_0) -> e^(-3*u_0^2)}}
make LV model
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
aij_dict: {a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0}
set_population_indices: [0, 1]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
aij_dict: {a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0}
_A_bindings: {a_0_1 -> -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, a_0_0 -> -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_1_1 -> -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, a_1_0 -> -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, k_1 -> K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, k_0 -> K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0, {}}
make LV adaptive dynamics
population vars [X_0, X_1]
population vars [X_0, X_1]
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 - X_0*X_2*b_0*c_0_0*c_2_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*X_2*b_0*c_0_1*c_2_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
a_0_2 : -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 - X_1*X_2*b_1*c_1_0*c_2_0*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*X_2*b_1*c_1_1*c_2_1*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
a_1_2 : -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
Inferring LV coefficients from X_2 equation: K_0*X_2*b_2*c_2_0*w_0 - X_0*X_2*b_2*c_0_0*c_2_0*w_0/r_0 - X_1*X_2*b_2*c_1_0*c_2_0*w_0/r_0 - X_2^2*b_2*c_2_0^2*w_0/r_0 + K_1*X_2*b_2*c_2_1*w_1 - X_0*X_2*b_2*c_0_1*c_2_1*w_1/r_1 - X_1*X_2*b_2*c_1_1*c_2_1*w_1/r_1 - X_2^2*b_2*c_2_1^2*w_1/r_1 - X_2*b_2*m_2
a_2_0 : -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1
a_2_1 : -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1
k_2 : K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2
aij_dict: {a_2_1: -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1, a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, a_2_0: -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1, k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, a_0_2: -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1, k_2: K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_2_2: -b_2*c_2_0^2*w_0/r_0 - b_2*c_2_1^2*w_1/r_1, a_1_2: -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0}
The invasion rate for mutant population is:
\begin{align*}
  \mathscr I = \frac{1}{X_{2}}\frac{dX_{2}}{dt} &= X_{0} {a}_{20} + X_{1} {a}_{21} + X_{2} {a}_{22} + k_{2} 
\end{align*}

limit as {a_2_0: a_0_0, k_2: k_0, a_2_1: a_0_1}
after those limits:
   1
  X_0
  X_1
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 - X_0*X_2*b_0*c_0_0*c_2_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*X_2*b_0*c_0_1*c_2_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
a_0_2 : -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 - X_1*X_2*b_1*c_1_0*c_2_0*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*X_2*b_1*c_1_1*c_2_1*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
a_1_2 : -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
Inferring LV coefficients from X_2 equation: K_0*X_2*b_2*c_2_0*w_0 - X_0*X_2*b_2*c_0_0*c_2_0*w_0/r_0 - X_1*X_2*b_2*c_1_0*c_2_0*w_0/r_0 - X_2^2*b_2*c_2_0^2*w_0/r_0 + K_1*X_2*b_2*c_2_1*w_1 - X_0*X_2*b_2*c_0_1*c_2_1*w_1/r_1 - X_1*X_2*b_2*c_1_1*c_2_1*w_1/r_1 - X_2^2*b_2*c_2_1^2*w_1/r_1 - X_2*b_2*m_2
a_2_0 : -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1
a_2_1 : -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1
k_2 : K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2
aij_dict: {a_2_1: -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1, a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, a_2_0: -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1, k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, a_0_2: -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1, k_2: K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_2_2: -b_2*c_2_0^2*w_0/r_0 - b_2*c_2_1^2*w_1/r_1, a_1_2: -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0}
The invasion rate for mutant population is:
\begin{align*}
  \mathscr I = \frac{1}{X_{2}}\frac{dX_{2}}{dt} &= X_{0} {a}_{20} + X_{1} {a}_{21} + X_{2} {a}_{22} + k_{2} 
\end{align*}

limit as {a_2_0: a_1_0, k_2: k_1, a_2_1: a_1_1}
after those limits:
   1
  X_0
  X_1
make LV evolution bindings
(('c_1', (u_0,)), e^(-3*(u_0 - 1)^2)) as tuple:expr?
{('c_1', (u_0,)): e^(-3*(u_0 - 1)^2)}
(('b', ()), 1) as tuple:expr?
{('b', ()): 1}
(('m', ()), 1) as tuple:expr?
{('m', ()): 1}
(('c_0', (u_0,)), e^(-3*u_0^2)) as tuple:expr?
{('c_0', (u_0,)): e^(-3*u_0^2)}
(a_0_1, (u_0, u_1) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as tuple:expr?
(a_0_1, (u_0, u_1) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as expr:function?
{('a_0_1', (u_0, u_1)): (u_0, u_1) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)}
(k_1, u_1 |--> 2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1) as tuple:expr?
(k_1, u_1 |--> 2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1) as expr:function?
{('k_1', (u_1,)): u_1 |--> 2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1}
(a_1_1, (u_1, u_1) |--> -e^(-6*(u_1 - 1)^2) - e^(-6*u_1^2)) as tuple:expr?
(a_1_1, (u_1, u_1) |--> -e^(-6*(u_1 - 1)^2) - e^(-6*u_1^2)) as expr:function?
{('a_1_1', (u_1, u_1)): (u_1, u_1) |--> -e^(-6*(u_1 - 1)^2) - e^(-6*u_1^2)}
(a_0_0, (u_0, u_0) |--> -e^(-6*(u_0 - 1)^2) - e^(-6*u_0^2)) as tuple:expr?
(a_0_0, (u_0, u_0) |--> -e^(-6*(u_0 - 1)^2) - e^(-6*u_0^2)) as expr:function?
{('a_0_0', (u_0, u_0)): (u_0, u_0) |--> -e^(-6*(u_0 - 1)^2) - e^(-6*u_0^2)}
(a_1_0, (u_1, u_0) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as tuple:expr?
(a_1_0, (u_1, u_0) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as expr:function?
{('a_1_0', (u_1, u_0)): (u_1, u_0) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)}
(k_0, u_0 |--> 2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1) as tuple:expr?
(k_0, u_0 |--> 2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1) as expr:function?
{('k_0', (u_0,)): u_0 |--> 2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1}
(('c_1', (u_0,)), e^(-3*(u_0 - 1)^2)) as tuple:expr?
{('c_1', (u_0,)): e^(-3*(u_0 - 1)^2)}
(('b', ()), 1) as tuple:expr?
{('b', ()): 1}
(('m', ()), 1) as tuple:expr?
{('m', ()): 1}
(('c_0', (u_0,)), e^(-3*u_0^2)) as tuple:expr?
{('c_0', (u_0,)): e^(-3*u_0^2)}
printing things in LaTeX
plot k vs. t
plot a vs. t
plot X vs. t
[{u_0 -> 0.25, t -> 0.0, {}}, {u_0 -> 0.265662419160928, t -> 0.025, {}}, {u_0 -> 0.28226857468823563, t -> 0.05, {}}, {u_0 -> 0.299872480583881, t -> 0.07500000000000001, {}}, {u_0 -> 0.31845546337300656, t -> 0.1, {}}, {u_0 -> 0.3378783170097277, t -> 0.125, {}}, {u_0 -> 0.35782716115120883, t -> 0.15000000000000002, {}}, {u_0 -> 0.37778695912223514, t -> 0.17500000000000002, {}}, {u_0 -> 0.397079446841211, t -> 0.2, {}}, {u_0 -> 0.4149928971417681, t -> 0.225, {}}, {u_0 -> 0.4309549365679862, t -> 0.25, {}}, {u_0 -> 0.4446570724884879, t -> 0.275, {}}, {u_0 -> 0.45606814713196436, t -> 0.30000000000000004, {}}, {u_0 -> 0.4653585625028991, t -> 0.325, {}}, {u_0 -> 0.4728048107485359, t -> 0.35000000000000003, {}}, {u_0 -> 0.4787100966112361, t -> 0.375, {}}, {u_0 -> 0.48336269709711227, t -> 0.4, {}}, {u_0 -> 0.4870127109134128, t -> 0.42500000000000004, {}}, {u_0 -> 0.4898687841542706, t -> 0.45, {}}, {u_0 -> 0.4921000188746971, t -> 0.47500000000000003, {}}, {u_0 -> 0.49384140965791007, t -> 0.5, {}}, {u_0 -> 0.4951996626892392, t -> 0.525, {}}, {u_0 -> 0.4962587022793896, t -> 0.55, {}}, {u_0 -> 0.49708426929797667, t -> 0.5750000000000001, {}}, {u_0 -> 0.4977277443658491, t -> 0.6000000000000001, {}}, {u_0 -> 0.49822924576908173, t -> 0.625, {}}, {u_0 -> 0.49862007951586146, t -> 0.65, {}}, {u_0 -> 0.4989246229040509, t -> 0.675, {}}, {u_1 -> 0.4999246229040509, u_0 -> 0.4979246229040509, t -> 0.7166324302932131, {}}, {u_1 -> 0.5000514524008203, u_0 -> 0.49789603227530416, t -> 0.7416324302932131, {}}, {u_1 -> 0.5001820408415375, u_0 -> 0.49785919011830765, t -> 0.7666324302932132, {}}, {u_1 -> 0.5003170601859778, u_0 -> 0.4978136566069744, t -> 0.7916324302932132, {}}, {u_1 -> 0.5004569153980033, u_0 -> 0.49775915900095186, t -> 0.8166324302932132, {}}, {u_1 -> 0.5006025213298894, u_0 -> 0.4976950562950173, t -> 0.8416324302932132, {}}, {u_1 -> 0.500754114897744, u_0 -> 0.4976211498123132, t -> 0.8666324302932132, {}}, {u_1 -> 0.5009126565636495, u_0 -> 0.49753672516413006, t -> 0.8916324302932133, {}}, {u_1 -> 0.501079004257443, u_0 -> 0.49744115038006137, t -> 0.9166324302932133, {}}, {u_1 -> 0.5012539831454303, u_0 -> 0.4973337330591011, t -> 0.9416324302932133, {}}, {u_1 -> 0.501438415296487, u_0 -> 0.4972137750871969, t -> 0.9666324302932133, {}}, {u_1 -> 0.5016331434222768, u_0 -> 0.49708058496919977, t -> 0.9916324302932134, {}}, {u_1 -> 0.501839227167113, u_0 -> 0.4969332283092303, t -> 1.0166324302932135, {}}, {u_1 -> 0.5020577160073354, u_0 -> 0.49677078209654796, t -> 1.0416324302932134, {}}, {u_1 -> 0.502289766819341, u_0 -> 0.49659221054543623, t -> 1.0666324302932133, {}}, {u_1 -> 0.5025363172385228, u_0 -> 0.4963967130370504, t -> 1.0916324302932134, {}}, {u_1 -> 0.5027989944791256, u_0 -> 0.49618274928205336, t -> 1.1166324302932136, {}}, {u_1 -> 0.5030789680365024, u_0 -> 0.4959492705903824, t -> 1.1416324302932135, {}}, {u_1 -> 0.5033777636842519, u_0 -> 0.49569485214552583, t -> 1.1666324302932134, {}}, {u_1 -> 0.5036969922866067, u_0 -> 0.4954179780497654, t -> 1.1916324302932135, {}}, {u_1 -> 0.5040383706021834, u_0 -> 0.49511701945736, t -> 1.2166324302932137, {}}, {u_1 -> 0.5044037476858051, u_0 -> 0.49479021433461, t -> 1.2416324302932136, {}}, {u_1 -> 0.5047951017117005, u_0 -> 0.49443567387951254, t -> 1.2666324302932135, {}}, {u_1 -> 0.5052145530148663, u_0 -> 0.49405135616788115, t -> 1.2916324302932136, {}}, {u_1 -> 0.5056643669452944, u_0 -> 0.49363506959466047, t -> 1.3166324302932138, {}}, {u_1 -> 0.5061470300437896, u_0 -> 0.49318440360384896, t -> 1.3416324302932137, {}}, {u_1 -> 0.5066651694408023, u_0 -> 0.49269680201320054, t -> 1.3666324302932136, {}}, {u_1 -> 0.5072215574609455, u_0 -> 0.49216955882539093, t -> 1.3916324302932137, {}}, {u_1 -> 0.5078192308156321, u_0 -> 0.4915997010249389, t -> 1.4166324302932138, {}}, {u_1 -> 0.5084615447068339, u_0 -> 0.49098393497905, t -> 1.4416324302932138, {}}, {u_1 -> 0.509151978673219, u_0 -> 0.49031883878068755, t -> 1.4666324302932137, {}}, {u_1 -> 0.5098942002236496, u_0 -> 0.4896007992137874, t -> 1.4916324302932138, {}}, {u_1 -> 0.5106924872440929, u_0 -> 0.4888255931470254, t -> 1.516632430293214, {}}, {u_1 -> 0.5115511241180573, u_0 -> 0.48798898598013807, t -> 1.5416324302932138, {}}, {u_1 -> 0.5124747483427917, u_0 -> 0.4870863881463089, t -> 1.5666324302932138, {}}, {u_1 -> 0.513468375082055, u_0 -> 0.4861128303344486, t -> 1.5916324302932139, {}}, {u_1 -> 0.5145375141636288, u_0 -> 0.4850628472078482, t -> 1.616632430293214, {}}, {u_1 -> 0.5156879596639854, u_0 -> 0.4839306866882982, t -> 1.641632430293214, {}}, {u_1 -> 0.5169259201737776, u_0 -> 0.48271018048162784, t -> 1.6666324302932138, {}}, {u_1 -> 0.5182580684826887, u_0 -> 0.4813946941639846, t -> 1.691632430293214, {}}, {u_1 -> 0.5196915884706602, u_0 -> 0.47997708010673146, t -> 1.716632430293214, {}}, {u_1 -> 0.5212341758138682, u_0 -> 0.47844967787965614, t -> 1.741632430293214, {}}, {u_1 -> 0.5228940850628894, u_0 -> 0.476804266983696, t -> 1.766632430293214, {}}, {u_1 -> 0.5246801097599607, u_0 -> 0.47503208617603726, t -> 1.7916324302932143, {}}, {u_1 -> 0.5266015602947609, u_0 -> 0.4731238550340889, t -> 1.8166324302932142, {}}, {u_1 -> 0.5286684063224798, u_0 -> 0.471069633187359, t -> 1.841632430293214, {}}, {u_1 -> 0.530891259224041, u_0 -> 0.46885883733938827, t -> 1.866632430293214, {}}, {u_1 -> 0.533281355668384, u_0 -> 0.46648025767379986, t -> 1.8916324302932144, {}}, {u_1 -> 0.5358505338637547, u_0 -> 0.4639220815630888, t -> 1.9166324302932143, {}}, {u_1 -> 0.5386113531385205, u_0 -> 0.4611717743056876, t -> 1.9416324302932142, {}}, {u_1 -> 0.5415770782989456, u_0 -> 0.4582160947485079, t -> 1.966632430293214, {}}, {u_1 -> 0.5447615600174498, u_0 -> 0.4550412148821439, t -> 1.9916324302932145, {}}, {u_1 -> 0.548179021312089, u_0 -> 0.4516329332884443, t -> 2.0166324302932144, {}}, {u_1 -> 0.5518443742150326, u_0 -> 0.44797635872806885, t -> 2.0416324302932143, {}}, {u_1 -> 0.555773016251717, u_0 -> 0.444056113632656, t -> 2.066632430293214, {}}, {u_1 -> 0.559980246617522, u_0 -> 0.4398569178901213, t -> 2.0916324302932146, {}}, {u_1 -> 0.5644817055295115, u_0 -> 0.4353631496146411, t -> 2.1166324302932145, {}}, {u_1 -> 0.5692932310979973, u_0 -> 0.43055898830710737, t -> 2.1416324302932144, {}}, {u_1 -> 0.5744299411385626, u_0 -> 0.42542933296257185, t -> 2.1666324302932143, {}}, {u_1 -> 0.5799060612281834, u_0 -> 0.4199599740424818, t -> 2.1916324302932146, {}}, {u_1 -> 0.585734897016503, u_0 -> 0.4141376212161244, t -> 2.2166324302932146, {}}, {u_1 -> 0.5919280643705584, u_0 -> 0.407950673168995, t -> 2.2416324302932145, {}}, {u_1 -> 0.5984954271629319, u_0 -> 0.4013892798522357, t -> 2.2666324302932144, {}}, {u_1 -> 0.6054438988031496, u_0 -> 0.3944465408417636, t -> 2.2916324302932147, {}}, {u_1 -> 0.6127771116439198, u_0 -> 0.38711883593991114, t -> 2.3166324302932146, {}}, {u_1 -> 0.6204949641120487, u_0 -> 0.3794062780334338, t -> 2.3416324302932146, {}}, {u_1 -> 0.6285924821957795, u_0 -> 0.37131385149788354, t -> 2.3666324302932145, {}}, {u_1 -> 0.6370596485731628, u_0 -> 0.3628515831008761, t -> 2.391632430293215, {}}, {u_1 -> 0.6458808164350047, u_0 -> 0.35403512812096477, t -> 2.4166324302932147, {}}, {u_1 -> 0.6550340662160832, u_0 -> 0.34488641358368555, t -> 2.4416324302932146, {}}, {u_1 -> 0.6644910349295771, u_0 -> 0.33543380893437863, t -> 2.4666324302932146, {}}, {u_1 -> 0.674217548857446, u_0 -> 0.3257114934196173, t -> 2.491632430293215, {}}, {u_1 -> 0.6841732061717825, u_0 -> 0.3157598734535167, t -> 2.516632430293215, {}}, {u_1 -> 0.694312451404653, u_0 -> 0.3056245082774087, t -> 2.5416324302932147, {}}, {u_1 -> 0.7045849230353927, u_0 -> 0.2953557624231983, t -> 2.5666324302932146, {}}, {u_1 -> 0.7149373178559947, u_0 -> 0.28500694155111256, t -> 2.591632430293215, {}}, {u_1 -> 0.7253139252611253, u_0 -> 0.2746337582299906, t -> 2.616632430293215, {}}, {u_1 -> 0.7356587252297426, u_0 -> 0.26429223417506814, t -> 2.641632430293215, {}}, {u_1 -> 0.7459162586973795, u_0 -> 0.2540378299730627, t -> 2.6666324302932147, {}}, {u_1 -> 0.7560334677431051, u_0 -> 0.2439236050800125, t -> 2.691632430293215, {}}, {u_1 -> 0.7659605792276915, u_0 -> 0.23399933427758263, t -> 2.716632430293215, {}}, {u_1 -> 0.7756523697321748, u_0 -> 0.22431024285615633, t -> 2.741632430293215, {}}, {u_1 -> 0.7850687884366145, u_0 -> 0.21489638380243486, t -> 2.766632430293215, {}}, {u_1 -> 0.7941755674963207, u_0 -> 0.20579202747957331, t -> 2.791632430293215, {}}, {u_1 -> 0.802944542907236, u_0 -> 0.1970253407979422, t -> 2.816632430293215, {}}, {u_1 -> 0.8113532971375091, u_0 -> 0.1886187445472506, t -> 2.841632430293215, {}}, {u_1 -> 0.8193854117579729, u_0 -> 0.18058866079627384, t -> 2.8666324302932154, {}}, {u_1 -> 0.8270300790078852, u_0 -> 0.17294590129151233, t -> 2.8916324302932153, {}}, {u_1 -> 0.8342814575332117, u_0 -> 0.16569631166051602, t -> 2.916632430293215, {}}, {u_1 -> 0.8411382739805653, u_0 -> 0.15884116978362364, t -> 2.941632430293215, {}}, {u_1 -> 0.8476032542167595, u_0 -> 0.15237775452319613, t -> 2.966632430293215, {}}, {u_1 -> 0.8536825015216357, u_0 -> 0.14629996747418728, t -> 2.9916324302932154, {}}, {u_1 -> 0.8593849691137242, u_0 -> 0.14059886039064806, t -> 3.0166324302932153, {}}, {u_1 -> 0.8647219163750941, u_0 -> 0.13526317891100517, t -> 3.041632430293215, {}}, {u_1 -> 0.8697064510507854, u_0 -> 0.1302798203163232, t -> 3.0666324302932155, {}}, {u_1 -> 0.8743528684503796, u_0 -> 0.12563449426941384, t -> 3.0916324302932154, {}}, {u_1 -> 0.8786764430540012, u_0 -> 0.12131193118852629, t -> 3.1166324302932154, {}}, {u_1 -> 0.8826932659528636, u_0 -> 0.11729604479065321, t -> 3.1416324302932153, {}}, {u_1 -> 0.8864196614756407, u_0 -> 0.11357051541449846, t -> 3.166632430293215, {}}, {u_1 -> 0.8898719805155857, u_0 -> 0.11011899667637975, t -> 3.1916324302932155, {}}, {u_1 -> 0.8930664102705026, u_0 -> 0.10692530571312296, t -> 3.2166324302932154, {}}, {u_1 -> 0.8960189399345446, u_0 -> 0.10397345749031006, t -> 3.2416324302932154, {}}, {u_1 -> 0.8987450686194658, u_0 -> 0.10124795685669563, t -> 3.2666324302932157, {}}, {u_1 -> 0.9012598262790249, u_0 -> 0.09873377762664705, t -> 3.2916324302932156, {}}, {u_1 -> 0.9035776003506311, u_0 -> 0.09641653592551437, t -> 3.3166324302932155, {}}, {u_1 -> 0.9057121691603419, u_0 -> 0.09428245679422628, t -> 3.3416324302932154, {}}, {u_1 -> 0.9076765935128567, u_0 -> 0.09231848259278694, t -> 3.3666324302932154, {}}, {u_1 -> 0.909483273974465, u_0 -> 0.09051221572954395, t -> 3.3916324302932157, {}}, {u_1 -> 0.9111438778492565, u_0 -> 0.08885199168279946, t -> 3.4166324302932156, {}}, {u_1 -> 0.9126693972946094, u_0 -> 0.0873268208977765, t -> 3.4416324302932155, {}}, {u_1 -> 0.914070117627706, u_0 -> 0.08592642048220389, t -> 3.466632430293216, {}}, {u_1 -> 0.915355673064554, u_0 -> 0.08464115847924802, t -> 3.491632430293216, {}}, {u_1 -> 0.9165350388425005, u_0 -> 0.08346206174972096, t -> 3.5166324302932157, {}}, {u_1 -> 0.9176165826266628, u_0 -> 0.08238076457662603, t -> 3.5416324302932156, {}}, {u_1 -> 0.918608075112412, u_0 -> 0.0813894980692369, t -> 3.5666324302932155, {}}, {u_1 -> 0.9195167320746113, u_0 -> 0.08048104812335438, t -> 3.591632430293216, {}}, {u_1 -> 0.9203492258107691, u_0 -> 0.07964874398531561, t -> 3.616632430293216, {}}, {u_1 -> 0.9211117430092669, u_0 -> 0.07888640039276378, t -> 3.6416324302932157, {}}, {u_1 -> 0.9218099999814974, u_0 -> 0.07818830235052443, t -> 3.666632430293216, {}}, {u_1 -> 0.922449271729266, u_0 -> 0.07754917606991599, t -> 3.691632430293216, {}}, {u_1 -> 0.9230344240651881, u_0 -> 0.07696415685493596, t -> 3.716632430293216, {}}, {u_1 -> 0.9235699428524231, u_0 -> 0.07642875987171652, t -> 3.741632430293216, {}}, {u_1 -> 0.9240599540793475, u_0 -> 0.07593886007682785, t -> 3.7666324302932157, {}}, {u_1 -> 0.9245082575649695, u_0 -> 0.07549065852109528, t -> 3.791632430293216, {}}, {u_1 -> 0.9249183472237326, u_0 -> 0.07508066208930604, t -> 3.816632430293216, {}}, {u_1 -> 0.9252934299105631, u_0 -> 0.0747056646591284, t -> 3.841632430293216, {}}, {u_1 -> 0.9256364584748896, u_0 -> 0.07436271405565326, t -> 3.8666324302932162, {}}, {u_1 -> 0.9259501356109767, u_0 -> 0.0740491082013757, t -> 3.891632430293216, {}}, {u_1 -> 0.9262369461796129, u_0 -> 0.07376236280238938, t -> 3.916632430293216, {}}, {u_1 -> 0.9264991673219188, u_0 -> 0.07350020123679395, t -> 3.941632430293216, {}}, {u_1 -> 0.9267388819105814, u_0 -> 0.0732605411065017, t -> 3.966632430293216, {}}, {u_1 -> 0.9269580129860798, u_0 -> 0.07304145980933281, t -> 3.9916324302932162, {}}, {u_1 -> 0.9269580129860798, u_0 -> 0.07304145980933281, t -> 5, {}}]
Xhat_0: ((e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) + e^(-3*u_0^2 - 3*u_1^2))*(2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1) - (2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1)*(e^(-6*(u_1 - 1)^2) + e^(-6*u_1^2)))/((e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) + e^(-3*u_0^2 - 3*u_1^2))^2 - (e^(-6*(u_0 - 1)^2) + e^(-6*u_0^2))*(e^(-6*(u_1 - 1)^2) + e^(-6*u_1^2)))
Xhat_1: ((2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1)*(e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) + e^(-3*u_0^2 - 3*u_1^2)) - (e^(-6*(u_0 - 1)^2) + e^(-6*u_0^2))*(2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1))/((e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) + e^(-3*u_0^2 - 3*u_1^2))^2 - (e^(-6*(u_0 - 1)^2) + e^(-6*u_0^2))*(e^(-6*(u_1 - 1)^2) + e^(-6*u_1^2)))
plot R vs. t
plot a vs. a
