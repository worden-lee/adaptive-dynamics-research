set_population_indices: [0, 1]
set_population_indices: [0, 1]
set_population_indices: [0, 1]
set_population_indices: [0, 1]
(c_0, u_0 |--> e^(-3*u_0^2)) as tuple:expr?
(c_0, u_0 |--> e^(-3*u_0^2)) as expr:function?
{('c_0', (u_0,)): u_0 |--> e^(-3*u_0^2)}
(b, 1) as tuple:expr?
(b, 1) as expr:function?
{('b', ()): 1}
(c_1, u_0 |--> e^(-3*(u_0 - 1)^2)) as tuple:expr?
(c_1, u_0 |--> e^(-3*(u_0 - 1)^2)) as expr:function?
{('c_1', (u_0,)): u_0 |--> e^(-3*(u_0 - 1)^2)}
(m, 1) as tuple:expr?
(m, 1) as expr:function?
{('m', ()): 1}
ad bindings: {K_0 -> 2, m_3 -> 1, c_0_1 -> e^(-3*(u_0 - 1)^2), r_1 -> 1, b_1 -> 1, c_2_0 -> e^(-3*u_2^2), c_2_1 -> e^(-3*(u_2 - 1)^2), K_1 -> 2, c_1_0 -> e^(-3*u_1^2), Rhat_0 -> -Xhat_0*e^(-3*u_0^2) - Xhat_1*e^(-3*u_1^2) + 2, c_3_1 -> e^(-3*(u_3 - 1)^2), c_1_1 -> e^(-3*(u_1 - 1)^2), gamma -> 1, b_0 -> 1, Rhat_1 -> -Xhat_0*e^(-3*(u_0 - 1)^2) - Xhat_1*e^(-3*(u_1 - 1)^2) + 2, b_2 -> 1, m_1 -> 1, c_0_0 -> e^(-3*u_0^2), w_1 -> 1, b_3 -> 1, R_0 -> -X_0*e^(-3*u_0^2) - X_1*e^(-3*u_1^2) + 2, r_0 -> 1, m_2 -> 1, w_0 -> 1, m_0 -> 1, c_3_0 -> e^(-3*u_3^2), R_1 -> -X_0*e^(-3*(u_0 - 1)^2) - X_1*e^(-3*(u_1 - 1)^2) + 2, {c_1(u_0) -> e^(-3*(u_0 - 1)^2), b() -> 1, m() -> 1, c_0(u_0) -> e^(-3*u_0^2)}}
model bindings: {R_0 -> -(X_0*c_0_0 + X_1*c_1_0 - K_0*r_0)/r_0, Rhat_1 -> -(Xhat_0*c_0_1 + Xhat_1*c_1_1 - K_1*r_1)/r_1, Rhat_0 -> -(Xhat_0*c_0_0 + Xhat_1*c_1_0 - K_0*r_0)/r_0, R_1 -> -(X_0*c_0_1 + X_1*c_1_1 - K_1*r_1)/r_1, {}}
_early_bindings: {b_3 -> b(u_3), b_0 -> b(u_0), c_1_0 -> c_0(u_1), c_0_1 -> c_1(u_0), b_2 -> b(u_2), m_2 -> m(u_2), b_1 -> b(u_1), c_2_0 -> c_0(u_2), m_1 -> m(u_1), c_3_1 -> c_1(u_3), m_0 -> m(u_0), m_3 -> m(u_3), c_0_0 -> c_0(u_0), c_1_1 -> c_1(u_1), c_3_0 -> c_0(u_3), c_2_1 -> c_1(u_2), {}}
_late_bindings: {K_0 -> 2, m_3 -> 1, c_0_1 -> e^(-3*(u_0 - 1)^2), r_1 -> 1, b_1 -> 1, c_2_0 -> e^(-3*u_2^2), c_2_1 -> e^(-3*(u_2 - 1)^2), K_1 -> 2, c_1_0 -> e^(-3*u_1^2), c_3_1 -> e^(-3*(u_3 - 1)^2), c_1_1 -> e^(-3*(u_1 - 1)^2), gamma -> 1, b_0 -> 1, b_2 -> 1, m_1 -> 1, c_0_0 -> e^(-3*u_0^2), w_1 -> 1, b_3 -> 1, r_0 -> 1, m_2 -> 1, w_0 -> 1, m_0 -> 1, c_3_0 -> e^(-3*u_3^2), {c_1(u_0) -> e^(-3*(u_0 - 1)^2), b() -> 1, m() -> 1, c_0(u_0) -> e^(-3*u_0^2)}}
make LV model
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
aij_dict: {k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1}
set_population_indices: [0, 1]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
aij_dict: {k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1}
_A_bindings: {a_0_0 -> -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_1_0 -> -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, k_1 -> K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, a_0_1 -> -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, k_0 -> K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0, a_1_1 -> -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, {}}
make LV adaptive dynamics
population vars [X_0, X_1]
population vars [X_0, X_1]
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 - X_0*X_2*b_0*c_0_0*c_2_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*X_2*b_0*c_0_1*c_2_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
a_0_2 : -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 - X_1*X_2*b_1*c_1_0*c_2_0*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*X_2*b_1*c_1_1*c_2_1*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
a_1_2 : -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
Inferring LV coefficients from X_2 equation: K_0*X_2*b_2*c_2_0*w_0 - X_0*X_2*b_2*c_0_0*c_2_0*w_0/r_0 - X_1*X_2*b_2*c_1_0*c_2_0*w_0/r_0 - X_2^2*b_2*c_2_0^2*w_0/r_0 + K_1*X_2*b_2*c_2_1*w_1 - X_0*X_2*b_2*c_0_1*c_2_1*w_1/r_1 - X_1*X_2*b_2*c_1_1*c_2_1*w_1/r_1 - X_2^2*b_2*c_2_1^2*w_1/r_1 - X_2*b_2*m_2
a_2_0 : -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1
a_2_1 : -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1
k_2 : K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2
aij_dict: {a_2_2: -b_2*c_2_0^2*w_0/r_0 - b_2*c_2_1^2*w_1/r_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, a_2_1: -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0, k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, a_2_0: -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_0_2: -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1, k_2: K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2, a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, a_1_2: -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1}
The invasion rate for mutant population is:
\begin{align*}
  \mathscr I = \frac{1}{X_{2}}\frac{dX_{2}}{dt} &= X_{0} {a}_{20} + X_{1} {a}_{21} + X_{2} {a}_{22} + k_{2} 
\end{align*}

limit as {a_2_1: a_0_1, a_2_0: a_0_0, k_2: k_0}
after those limits:
   1
  X_0
  X_1
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
set_population_indices: [0, 1, 2]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 - X_0*X_2*b_0*c_0_0*c_2_0*w_0/r_0 + K_1*X_0*b_0*c_0_1*w_1 - X_0^2*b_0*c_0_1^2*w_1/r_1 - X_0*X_1*b_0*c_0_1*c_1_1*w_1/r_1 - X_0*X_2*b_0*c_0_1*c_2_1*w_1/r_1 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1
a_0_2 : -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1
k_0 : K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 - X_1*X_2*b_1*c_1_0*c_2_0*w_0/r_0 + K_1*X_1*b_1*c_1_1*w_1 - X_0*X_1*b_1*c_0_1*c_1_1*w_1/r_1 - X_1^2*b_1*c_1_1^2*w_1/r_1 - X_1*X_2*b_1*c_1_1*c_2_1*w_1/r_1 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1
a_1_2 : -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1
k_1 : K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1
Inferring LV coefficients from X_2 equation: K_0*X_2*b_2*c_2_0*w_0 - X_0*X_2*b_2*c_0_0*c_2_0*w_0/r_0 - X_1*X_2*b_2*c_1_0*c_2_0*w_0/r_0 - X_2^2*b_2*c_2_0^2*w_0/r_0 + K_1*X_2*b_2*c_2_1*w_1 - X_0*X_2*b_2*c_0_1*c_2_1*w_1/r_1 - X_1*X_2*b_2*c_1_1*c_2_1*w_1/r_1 - X_2^2*b_2*c_2_1^2*w_1/r_1 - X_2*b_2*m_2
a_2_0 : -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1
a_2_1 : -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1
k_2 : K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2
aij_dict: {a_2_2: -b_2*c_2_0^2*w_0/r_0 - b_2*c_2_1^2*w_1/r_1, a_1_1: -b_1*c_1_0^2*w_0/r_0 - b_1*c_1_1^2*w_1/r_1, a_2_1: -b_2*c_1_0*c_2_0*w_0/r_0 - b_2*c_1_1*c_2_1*w_1/r_1, k_0: K_0*b_0*c_0_0*w_0 + K_1*b_0*c_0_1*w_1 - b_0*m_0, k_1: K_0*b_1*c_1_0*w_0 + K_1*b_1*c_1_1*w_1 - b_1*m_1, a_2_0: -b_2*c_0_0*c_2_0*w_0/r_0 - b_2*c_0_1*c_2_1*w_1/r_1, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0 - b_1*c_0_1*c_1_1*w_1/r_1, a_0_0: -b_0*c_0_0^2*w_0/r_0 - b_0*c_0_1^2*w_1/r_1, a_0_2: -b_0*c_0_0*c_2_0*w_0/r_0 - b_0*c_0_1*c_2_1*w_1/r_1, k_2: K_0*b_2*c_2_0*w_0 + K_1*b_2*c_2_1*w_1 - b_2*m_2, a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0 - b_0*c_0_1*c_1_1*w_1/r_1, a_1_2: -b_1*c_1_0*c_2_0*w_0/r_0 - b_1*c_1_1*c_2_1*w_1/r_1}
The invasion rate for mutant population is:
\begin{align*}
  \mathscr I = \frac{1}{X_{2}}\frac{dX_{2}}{dt} &= X_{0} {a}_{20} + X_{1} {a}_{21} + X_{2} {a}_{22} + k_{2} 
\end{align*}

limit as {a_2_1: a_1_1, a_2_0: a_1_0, k_2: k_1}
after those limits:
   1
  X_0
  X_1
make LV evolution bindings
(('c_1', (u_0,)), e^(-3*(u_0 - 1)^2)) as tuple:expr?
{('c_1', (u_0,)): e^(-3*(u_0 - 1)^2)}
(('b', ()), 1) as tuple:expr?
{('b', ()): 1}
(('m', ()), 1) as tuple:expr?
{('m', ()): 1}
(('c_0', (u_0,)), e^(-3*u_0^2)) as tuple:expr?
{('c_0', (u_0,)): e^(-3*u_0^2)}
(k_1, u_1 |--> 2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1) as tuple:expr?
(k_1, u_1 |--> 2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1) as expr:function?
{('k_1', (u_1,)): u_1 |--> 2*e^(-3*(u_1 - 1)^2) + 2*e^(-3*u_1^2) - 1}
(k_0, u_0 |--> 2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1) as tuple:expr?
(k_0, u_0 |--> 2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1) as expr:function?
{('k_0', (u_0,)): u_0 |--> 2*e^(-3*(u_0 - 1)^2) + 2*e^(-3*u_0^2) - 1}
(a_1_0, (u_1, u_0) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as tuple:expr?
(a_1_0, (u_1, u_0) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as expr:function?
{('a_1_0', (u_1, u_0)): (u_1, u_0) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)}
(a_0_0, (u_0, u_0) |--> -e^(-6*(u_0 - 1)^2) - e^(-6*u_0^2)) as tuple:expr?
(a_0_0, (u_0, u_0) |--> -e^(-6*(u_0 - 1)^2) - e^(-6*u_0^2)) as expr:function?
{('a_0_0', (u_0, u_0)): (u_0, u_0) |--> -e^(-6*(u_0 - 1)^2) - e^(-6*u_0^2)}
(a_0_1, (u_0, u_1) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as tuple:expr?
(a_0_1, (u_0, u_1) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)) as expr:function?
{('a_0_1', (u_0, u_1)): (u_0, u_1) |--> -e^(-3*(u_0 - 1)^2 - 3*(u_1 - 1)^2) - e^(-3*u_0^2 - 3*u_1^2)}
(a_1_1, (u_1, u_1) |--> -e^(-6*(u_1 - 1)^2) - e^(-6*u_1^2)) as tuple:expr?
(a_1_1, (u_1, u_1) |--> -e^(-6*(u_1 - 1)^2) - e^(-6*u_1^2)) as expr:function?
{('a_1_1', (u_1, u_1)): (u_1, u_1) |--> -e^(-6*(u_1 - 1)^2) - e^(-6*u_1^2)}
(('c_1', (u_0,)), e^(-3*(u_0 - 1)^2)) as tuple:expr?
{('c_1', (u_0,)): e^(-3*(u_0 - 1)^2)}
(('b', ()), 1) as tuple:expr?
{('b', ()): 1}
(('m', ()), 1) as tuple:expr?
{('m', ()): 1}
(('c_0', (u_0,)), e^(-3*u_0^2)) as tuple:expr?
{('c_0', (u_0,)): e^(-3*u_0^2)}
(('c_1', (u_0,)), e^(-3*(u_0 - 1)^2)) as tuple:expr?
{('c_1', (u_0,)): e^(-3*(u_0 - 1)^2)}
(('b', ()), 1) as tuple:expr?
{('b', ()): 1}
(('m', ()), 1) as tuple:expr?
{('m', ()): 1}
(('c_0', (u_0,)), e^(-3*u_0^2)) as tuple:expr?
{('c_0', (u_0,)): e^(-3*u_0^2)}
printing things in LaTeX
plot k vs. t
plot a vs. t
plot X vs. t
plot R vs. t
plot a vs. a
plot a vs. a with arrows
