# This file was *autogenerated* from the file large-assemble.sage
from sage.all_cmdline import *   # import sage library
_sage_const_100 = Integer(100); _sage_const_1e7 = RealNumber('1e+7'); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_0p001 = RealNumber('0.001')# requires: large.py
# produces: large-assemble.sobj
from sage.all import *
from sage.misc.latex import _latex_file_

import large
import dynamicalsystems

set_random_seed(_sage_const_0 )

N_pop = _sage_const_1 #5

smr = large.LargeNumbersPopulation( n=_sage_const_0  )

t = _sage_const_0 
state = dynamicalsystems.Bindings()
soln = dynamicalsystems.Trajectory( smr, [] )
while smr.n_populations() < N_pop:
    ni = smr.add_random_species()
    state[ smr._population_indexer[ni] ] = _sage_const_1 
    smu = smr.bind( { ui:_sage_const_0  for ii in smr._population_indices for ui in smr._u_indexer[ii] } )
    print 'go', t, 'to', t+_sage_const_100 ; sys.stdout.flush()
    ni_soln = smu.solve_gsl( [ state(x) for x in smu._vars ], start_time=t, end_time=t+_sage_const_100  )
    if any( abs(x)>_sage_const_1e7  or math.isnan(x) for x in ni_soln._timeseries[-_sage_const_1 ].values() ):
	# it caused an explosion, back it out
	print ni, 'caused an explosion'
	smr.remove_population( ni )
	continue
    state = ni_soln._timeseries[-_sage_const_1 ]
    t = state('t')
    soln += ni_soln
    defunct = set( [ i for i in smr._population_indices if ni_soln._timeseries[-_sage_const_1 ]( smr._population_indexer[i] ) < _sage_const_0p001  ] )
    if len(defunct) > _sage_const_0 :
        print 'extinctions:', defunct
        smr.remove_populations( defunct )

del smu
del ni_soln
save_session( 'large-assemble' )
