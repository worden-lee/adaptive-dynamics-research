# This file was *autogenerated* from the file aij-evol-plot.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_100 = Integer(100); _sage_const_500 = Integer(500); _sage_const_0p7 = RealNumber('0.7'); _sage_const_3p2 = RealNumber('3.2')# requires: aij-evol.sobj
# produces: aij-evol-plot.sage.out.tex 
# produces: aij-a-vs-t.svg aij-a-vs-a.svg
from sage.all import *
from sage.misc.latex import _latex_file_
from sage.misc.latex import latex

import aij
import latex_output
import dynamicalsystems
import adaptivedynamics
import lotkavolterra

# create variables with custom latex names because load_session
# creates them wrong: http://trac.sagemath.org/ticket/17559
for x in ('X_0', 'X_i', 'X_1'): dynamicalsystems.hat(SR.symbol(x))
#SR.symbol( 'c_0_0', latex_name='c_{00}' )
#SR.symbol( 'c_i_0', latex_name='c_{i0}' )

load_session("aij-evol")

ltx = latex_output.latex_output( 'aij-evol-plot.sage.out.tex' )

#ltx.write( 'sm\_traj t:', [ ts('t') for ts in ad_traj._timeseries ], '\n\n' )
#ltx.write( 'starts with:' )
#ltx.write_block( ad_traj._timeseries[0] )
#if 1 in ad_traj._timeseries:
#    ltx.write_block( ad_traj._timeseries[1] )

#ltx.write( 'flow: $%s \mapsto %s$\n\n' % (
#	latex( latex_output.column_vector( symbolic_adap._vars ) ),
#	latex( latex_output.column_vector( [ symbolic_adap._flow[v] for v in symbolic_adap._vars ] ) ) ) )

#ltx.write( 'flow at ', '$%s$'%latex( latex_output.column_vector( ad_init_state ) ), ': ', 
#    '$%s$'%latex( latex_output.column_vector( ad_init( symbolic_adap._flow[v] ) for v in symbolic_adap._vars ) ),
#    '\n\n' )

#ltx.write( 'a values:' )
#ltx.write_block( matrix( [ [ slv._lv_model._a_indexer[i][j] for j in symbolic_adap._popdyn_model._population_indices ] for i in symbolic_adap._popdyn_model._population_indices ] ) )
#ltx.write_block( matrix( [ [ slv._lv_model._A_bindings( slv._lv_model._a_indexer[i][j] ) for j in symbolic_adap._popdyn_model._population_indices ] for i in symbolic_adap._popdyn_model._population_indices ] ) )
#ltx.write( 'X values at time 0:' )
#ltx.write_block( [ x == ad_traj._timeseries[0]( equil( x ) ) for x in smr.equilibrium_vars() ] )
#ltx.write( 'sensitivity of $\hat{X}$:\n' )
#ltx.write_equality(
#    matrix( [ SR.symbol( 'kdjflkjdf', latex_name=r'\frac{\partial\hat{X}_i}{\partial u_{j0}}' ) ] ),
#    matrix( [ [ ad_traj._timeseries[0]( diff( equil(x), u ) ) for u in symbolic_adap._vars ] for x in smr.equilibrium_vars() ] )
#)

print ad_traj._annotated_timeseries
t = SR.symbol('t')

#atp = list_plot( [ (d[t],aij) for d in ad_traj._annotated_timeseries for ann,aij in d.iteritems() if str(ann[0]) == 'a' ], color='red' )
#atp.axes_labels( [ '$t$', '$a$' ] )
#atp.save( 'aij-a-vs-t-0.svg', figsize=(5,5) )

atp = Graphics()
dprev = None
for d in ad_traj._annotated_timeseries:
    tval = d[(t,)]
    for ann,aij in d.iteritems():
	if dprev is None:
	    dprev = d
	    continue
	dprev = d
	if str(ann[_sage_const_0 ]) != 'a': continue
	a,i,j = ann
	if i in ad_traj._lineage and ad_traj._lineage[i][_sage_const_1 ] == tval:
	    ipar = ad_traj._lineage[i][_sage_const_0 ]
	else: ipar = i
	if j in ad_traj._lineage and ad_traj._lineage[j][_sage_const_1 ] == tval:
	    jpar = ad_traj._lineage[j][_sage_const_0 ]
	else: jpar = j
	atp += line( [(tval-_sage_const_1 ,dprev[(a,ipar,jpar)]),(tval,aij)],
	    color = (i == j and 'black' or (_sage_const_1 ,_sage_const_0p7 ,_sage_const_0p7 )) )
atp.axes_labels( [ '$t$', '$a$' ] )
atp.save( 'aij-a-vs-t.svg', figsize=(_sage_const_5 ,_sage_const_5 ) )

#aap = lotkavolterra.plot_aij_with_arrows( ad_traj, nlv, scale=0.05 )

aap = Graphics()
dprev = None
for d in ad_traj._annotated_timeseries:
    if dprev is not None:
        tval = d[(t,)]
        for ann,aij in d.iteritems():
	    if str(ann[_sage_const_0 ]) != 'a': continue
	    a,i,j = ann
	    if i in ad_traj._lineage and ad_traj._lineage[i][_sage_const_1 ] == tval:
	        ipar = ad_traj._lineage[i][_sage_const_0 ]
		print 'time', tval, ipar, '->', i
	    else: ipar = i
	    if j in ad_traj._lineage and ad_traj._lineage[j][_sage_const_1 ] == tval:
	        jpar = ad_traj._lineage[j][_sage_const_0 ]
		print 'time', tval, jpar, '->', j
	    else: jpar = j
	    if i is ipar and j is jpar: continue
	    print 'dprev', dprev
	    print 'line', [(ipar,jpar),(i,j)], [(dprev[(a,jpar,ipar)],dprev[(a,ipar,jpar)]),(d[(a,j,i)],aij)]
	    aap += line( [(dprev[(a,jpar,ipar)],dprev[(a,ipar,jpar)]),(d[(a,j,i)],aij)],
	        color = (i == j and 'black' or (_sage_const_1 ,_sage_const_0p7 ,_sage_const_0p7 )) )
    dprev = d
aap.axes_labels( [ '$a_{ij}$', '$a_{ji}$' ] )
aap.save( 'aij-a-vs-a.svg', figsize=(_sage_const_5 ,_sage_const_5 ) )

ltx.close()
exit(0 )

#aij_adap.bind_in_place( fb )

print 'flow at initial conditions:', pred_prey_init( aij_adap._flow )

ppp = Graphics()
for v, c, l in zip( aij_adap._vars, ['blue', 'red'], ['prey $u_0$','predator $u_1$'] ):
    ppp += pred_prey_traj.plot( 't', v, color=c, legend_label=l )
ppp.save( 'aij-pred-prey-adap.png',
    ticks=[_sage_const_100 ,pi],
    tick_formatter=[None,pi],
    figsize=(_sage_const_5 ,_sage_const_5 )
)
ppp.save( 'aij-pred-prey-adap.svg',
    ticks=[_sage_const_500 ,pi],
    tick_formatter=[None,pi],
    figsize=(_sage_const_3 ,_sage_const_3 )
)

pred_prey_traj.plot( 't', 'u_0_a - u_0_b', legend_label='$u_0-u_1$' ).save(
    'aij-pred-prey-adap-difference.png',
    ymin=_sage_const_0 ,
    ymax=_sage_const_3p2 ,
    ticks=[_sage_const_100 ,pi/_sage_const_2 ],
    tick_formatter=[None,pi],
    figsize=(_sage_const_5 ,_sage_const_5 )
)

xs = aij_adap._popdyn_model.equilibrium_vars()
ppx = Graphics()
for xhat in xs:
    ppx += pred_prey_traj.plot( 't', xhat, legend_label='$%s$'%latex(xhat) )
ppx.save( 'aij-pred-prey-x-vs-t.png', figsize=(_sage_const_5 ,_sage_const_5 ) )

ltx.close()
