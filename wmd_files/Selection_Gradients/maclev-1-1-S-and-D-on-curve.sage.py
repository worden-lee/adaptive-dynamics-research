# This file was *autogenerated* from the file maclev-1-1-S-and-D-on-curve.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_1p2 = RealNumber('1.2'); _sage_const_0p5 = RealNumber('0.5')# requires: maclevmodels.py maclev-1-1-mc-adap-geom.sobj
# produces: maclev-1-1-S-and-D-on-curve.png
from dynamicalsystems import *
from plot_vector_field_along_curve import *
load_session( 'maclev-1-1-mc-adap-geom' )
var( 'b_0 c m_0 w_0 r_0 K_0 gamma' )
fixed_parameter_bindings = Bindings( 
  { r_0: _sage_const_1 , w_0: _sage_const_1 ,
    K_0: _sage_const_2 , gamma: _sage_const_1  } )
curve = [ fixed_parameter_bindings( c00_bindings( change_p_to_functions( e ) ) ) for e in [ - b_0 * c * c * w_0 / r_0, K_0 * b_0 * c * w_0 - b_0 * m_0 ] ]
vf_S = [ fixed_parameter_bindings( c00_bindings( change_p_to_functions( e ) ) ) for e in [ - curve[_sage_const_1 ]/curve[_sage_const_0 ], _sage_const_1  ] ]
vf_D = [ fixed_parameter_bindings( c00_bindings( change_p_to_functions( (K_0 * w_0 - m_0/c) * (b_0**_sage_const_2  * m_0 / c) * e ) ) ) for e in [ - _sage_const_1 , r_0 * K_0 / c ] ]
crange = (c, _sage_const_0p5 , _sage_const_1p2 )
cp = parametric_plot( curve, crange, color='black' )
vfp_S = plot_vector_field_on_curve( vf_S, curve, crange, color='red', frame=false );
vfp_D = plot_vector_field_on_curve( vf_D, curve, crange, color='green', frame=false );
p = cp + vfp_S + vfp_D
p.axes_labels( [ '$a$', '$k$' ] );
p.save( 'maclev-1-1-S-and-D-on-curve.png', figsize=(_sage_const_4 ,_sage_const_4 ) );
