# requires: maclevmodels.py $(SageAdaptiveDynamics)/adaptivedynamics.py maclev-1-1.sobj
# produces: maclev-1-1-c00.png maclev-1-1-X.png maclev-1-1-ak.png maclev-1-1-adap.sage.out.tex maclev-1-1-adap.sobj
from sage.all import *
from sage.misc.latex import _latex_file_
from sage.misc.latex import latex
latex.add_to_preamble('\\usepackage{amsmath}')

import os
import sys
sys.path.append( os.environ['SageUtils'] )
sys.path.append( os.environ['SageDynamics'] )
sys.path.append( os.environ['SageAdaptiveDynamics'] )
from maclevmodels import *
from adaptivedynamics import *
from latex_output import *

load_session('maclev-1-1')

ltx = latex_output( 'maclev-1-1-adap.sage.out.tex' )

u_indexer = indexer('u')
u_0 = u_indexer[0]

import operator
evol_c_bindings = Bindings( reduce( operator.add, (
    [ ( rescomp._indexers['c'][i][0], u_indexer[i] ),
      ( rescomp._indexers['b'][i], 1 ),
      ( rescomp._indexers['m'][i], 1 )
    ] for i in (0,'i') ) ) )

maclev_adap = AdaptiveDynamicsModel(maclev,
    [ indexer('u') ], parameters_to_functions_bindings=evol_c_bindings)

print 'when c_00 == u, the adaptive dynamics is ', maclev_adap

ltx.write( 'Adaptive dynamics of the Mac-Lev model with $b_i=m_i=1$ and $c_{i0} = u_i$:' )
ltx.write_block( maclev_adap )

numeric_params = Bindings(
  { SR.var('r_0'): 1, SR.var('w_0'): 1,
    SR.var('K_0'): 2, SR.var('gamma'): 1 } )
maclev_adap_bound = maclev_adap.bind( numeric_params )

ltx.write( 'and the bound adaptive dynamics is:', latex( maclev_adap_bound ) )

ltx.write( 'its bindings:', latex(maclev_adap_bound._bindings) )
initial_u = 2/3
c_evolution = maclev_adap_bound.solve( [0, initial_u], end_points=10 )

# and plot. 
t = maclev_adap.time_variable()
c_evolution.plot( t, u_indexer[0], 'maclev-1-1-c00.png', ylabel='$c_{00}$', figsize=(4,4) )
# Xhat increases.
Xhat = SR.var('X_0', latex_name='\hat{X}_0')
c_evolution.plot( t, maclev_adap_bound._parameters_to_functions_bindings( maclev_adap_bound._bindings( Xhat ) ), "maclev-1-1-X.png", ylabel=Xhat, figsize=(4,4) )
Rhat = SR.var('R_0', latex_name='\hat{R}_0')
c_evolution.plot( t, maclev_adap_bound._parameters_to_functions_bindings( maclev_adap_bound._bindings( Rhat ) ), "maclev-1-1-R.png", figsize=(4,4) )
# and let's also plot k_0 vs. a_00.
# these are the coefficients if you rewrite the maclev dynamics
# as dX_0/dt = X_0(k_0 + a_00 X_0)
# and why not get sage to do that, rather than type in the definitions
X_0 = maclev._population_indexer[0]
rhsc = maclev._flow[X_0].collect(X_0)
k_0 = rhsc.coeff(X_0,1)
a_00 = rhsc.coeff(X_0,2)
ltx.write( 'With and without these bindings, the Lotka-Volterra coefficients $k_0$ and $a_{00}$ are:' )
ltx.write_equality( SR.var('k_0'), k_0, numeric_params( maclev_adap_bound._parameters_to_functions_bindings(k_0)) )
ltx.write_equality( SR.var('a_0_0', latex_name='a_{00}' ), a_00, numeric_params( maclev_adap_bound._parameters_to_functions_bindings(a_00) ) )

ltx.write( 'And the equilibrium values $\\hat X$ and $\\hat R$:',
    '\\begin{align*}\n  \\hat X_0 &\\to ',
    latex( maclev_adap_bound._bindings( Xhat ) ), ' = ',
    latex( numeric_params( maclev_adap_bound._bindings( Xhat ) ) ), '\\\\\n',
    '  \\hat R_0 &\\to ',
    latex( maclev_adap_bound._bindings( Rhat ) ), ' = ',
    latex( numeric_params( maclev_adap_bound._bindings( Rhat ) ) ), '\n',
    '\\end{align*}\n' )

c_evolution.plot( maclev_adap_bound._parameters_to_functions_bindings( a_00 ), maclev_adap_bound._parameters_to_functions_bindings( k_0 ), "maclev-1-1-ak.png",
  xlabel = SR.var('a_00'), ylabel = SR.var('k_0'), figsize=(4,4) )

ltx.close()

save_session('maclev-1-1-adap')
