ad bindings: {r_0 -> 1, w_0 -> 1, c_1_0 -> u_1, R_0 -> -X_0*u_0 + 2, gamma -> 1, K_0 -> 2, m_0 -> 1, c_0_0 -> u_0, Xhat_0 -> (2*u_0 - 1)/u_0^2, b_1 -> 1, b_0 -> 1, Rhat_0 -> -(2*u_0 - 1)/u_0 + 2, m_1 -> 1, {}}
model bindings: {Rhat_0 -> -(Xhat_0*c_0_0 - K_0*r_0)/r_0, R_0 -> -(X_0*c_0_0 - K_0*r_0)/r_0, {}}
_early_bindings: {c_1_0 -> u_1, m_0 -> 1, c_0_0 -> u_0, b_1 -> 1, b_0 -> 1, m_1 -> 1, {}}
_late_bindings: {, {}}
make LV model
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*b_0*m_0
k_0 : K_0*b_0*c_0_0*w_0 - b_0*m_0
aij_dict: {k_0: K_0*b_0*c_0_0*w_0 - b_0*m_0, a_0_0: -b_0*c_0_0^2*w_0/r_0}
set_population_indices: [0]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*b_0*m_0
k_0 : K_0*b_0*c_0_0*w_0 - b_0*m_0
aij_dict: {k_0: K_0*b_0*c_0_0*w_0 - b_0*m_0, a_0_0: -b_0*c_0_0^2*w_0/r_0}
_A_bindings: {k_0 -> K_0*b_0*c_0_0*w_0 - b_0*m_0, a_0_0 -> -b_0*c_0_0^2*w_0/r_0, {}}
make LV adaptive dynamics
population vars [X_0]
population vars [X_0]
set_population_indices: [0, 1]
set_population_indices: [0, 1]
set_population_indices: [0, 1]
Inferring LV coefficients from X_0 equation: K_0*X_0*b_0*c_0_0*w_0 - X_0^2*b_0*c_0_0^2*w_0/r_0 - X_0*X_1*b_0*c_0_0*c_1_0*w_0/r_0 - X_0*b_0*m_0
a_0_1 : -b_0*c_0_0*c_1_0*w_0/r_0
k_0 : K_0*b_0*c_0_0*w_0 - b_0*m_0
Inferring LV coefficients from X_1 equation: K_0*X_1*b_1*c_1_0*w_0 - X_0*X_1*b_1*c_0_0*c_1_0*w_0/r_0 - X_1^2*b_1*c_1_0^2*w_0/r_0 - X_1*b_1*m_1
a_1_0 : -b_1*c_0_0*c_1_0*w_0/r_0
k_1 : K_0*b_1*c_1_0*w_0 - b_1*m_1
aij_dict: {k_1: K_0*b_1*c_1_0*w_0 - b_1*m_1, a_0_1: -b_0*c_0_0*c_1_0*w_0/r_0, a_0_0: -b_0*c_0_0^2*w_0/r_0, a_1_1: -b_1*c_1_0^2*w_0/r_0, k_0: K_0*b_0*c_0_0*w_0 - b_0*m_0, a_1_0: -b_1*c_0_0*c_1_0*w_0/r_0}
The invasion rate for mutant population is:
\begin{align*}
  \mathscr I = \frac{1}{X_{1}}\frac{dX_{1}}{dt} &= X_{0} {a}_{10} + X_{1} {a}_{11} + k_{1} 
\end{align*}

limit as {k_1: k_0, a_1_0: a_0_0}
after those limits:
   1
  X_0
make LV evolution bindings
(k_0, u_0 |--> 2*u_0 - 1) as tuple:expr?
(k_0, u_0 |--> 2*u_0 - 1) as expr:function?
{('k_0', (u_0,)): u_0 |--> 2*u_0 - 1}
(a_0_0, (u_0, u_0) |--> -u_0^2) as tuple:expr?
(a_0_0, (u_0, u_0) |--> -u_0^2) as expr:function?
{('a_0_0', (u_0, u_0)): (u_0, u_0) |--> -u_0^2}
