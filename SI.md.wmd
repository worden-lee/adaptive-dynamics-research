---
layout: page
title: "Figures for my Systems class, making talk slides, etc."
wmd_project: Systems
wmd_prerequisite_projects:
  SageDynamicsRepo: SageDynamicsRepo
---

<source-file filename=phase_portraits.sage.step lang=sage>
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageUtils)/latex_output.py
# produces: phase_portraits.sobj SI.sage.out.tex SI.png
# produces: competition.sage.out.tex competition.png
from sage.all import * 
from sage.misc.latex import _latex_file_
 
sys.path.append( os.environ['SageUtils'] )
sys.path.append( os.environ['SageDynamics'] )

import latex_output
import dynamicalsystems

ltx = latex_output.latex_output( 'SI.sage.out.tex' )

# now that I've defined the general resource-competition model, let's
# create a 1-resource, 1-population instantiation to work with
var('S I r')
SI = dynamicalsystems.ODESystem(
	{ S: - r*S*I, I: r*S*I },
	[S, I],
	bindings = dynamicalsystems.Bindings( { 'r':1 } )
)

ltx.write( 'The SI model:' )
ltx.write_block( SI )

SI_phase_plane = SI.plot_vector_field( (I,0,1), (S,0,1), color='gray' )

equil = SI.equilibria()
ltx.write( 'equilibria: ', latex(equil) )

SI_phase_plane.save( 'SI.png', figsize=(5,5) )

ltx = latex_output.latex_output( 'competition.sage.out.tex' )

var('X_2 X_1 c_0 c_1')
competition = dynamicalsystems.ODESystem(
	{ X_2: X_2 - X_2^2 - c_0*X_2*X_1, X_1: X_1 - X_1^2 - c_1*X_2*X_1 },
	[X_2, X_1],
	bindings = dynamicalsystems.Bindings( { 'c_0':0.4, 'c_1':0.5 } )
)

ltx.write( 'The competition model:' )
ltx.write_block( competition )

competition_phase_plane = competition.plot_vector_field( (X_1,0,1.1), (X_2,0,1.1), color='gray' )

equil = competition.equilibria()
ltx.write( 'equilibria: ', latex(equil) )
competition_phase_plane += point( [ ( dynamicalsystems.Bindings(eq)( 'Xhat_1' ), dynamicalsystems.Bindings(eq)( 'Xhat_2' ) ) for eq in equil ], size=40 )

competition_phase_plane.axes_labels( [ '$X_1$', '$X_2$' ] )
competition_phase_plane.save( 'competition.png', figsize=(5,5) )

ltx.close()

save_session('phase_portraits')

#ltx.close()
#save_session('foodweb')
#sys.exit( 0r )
</source-file>

<project-file filename=SI.sage.out.html/>

<project-file filename=SI.png/>

<project-file filename=competition.sage.out.html/>

<project-file filename=competition.png/>

## Adap. Dyn. eqns for talk slides

<source-file filename=popdyn-example.sage.step display=none>
# requires: $(SageDynamics)/dynamicalsystems.py
# requires: $(SageUtils)/latex_output.py
# produces: popdyn-example.cd.tex popdyn-example.svg
from sage.all import *
from sage.misc.latex import _latex_file_

sys.path.append( os.environ['SageUtils'] )
sys.path.append( os.environ['SageDynamics'] )
import dynamicalsystems
import latex_output

ltx = latex_output.latex_output( 'popdyn-example.cd.tex' )

# now that I've defined the general resource-competition model, let's
# create a 1-resource, 1-population instantiation to work with
var('X_1 X_2')
sys = dynamicalsystems.ODESystem(
	{ X_1: X_1 - 1/5*X_1^2 - 1/10*X_1*X_2, X_2: X_2 - 1/5*X_1*X_2 - 1/3*X_2^2 },
	[ X_1, X_2 ]
)

ltx.write( sys )

soln = sys.solve( [ 1, 9 ], end_time=15 )
ts = Graphics()
ts += soln.plot( 't', X_1, color='red', legend_label='$X_1$' )
ts += soln.plot( 't', X_2, color='blue', legend_label='$X_2$' )
ts.set_legend_options( back_color='white' )
ts.axes_labels( [ "$t$", "$X$" ] )
ts.save( 'popdyn-example.svg', figsize=(4,3) )

save_session('popdyn-example')

ltx.close()
#save_session('foodweb')
#sys.exit( 0r )
</source-file>

<project-file filename=popdyn-example.cd.crop.svg/>

<project-file filename=popdyn-example.svg/>

<source-file filename=ad.cd display=ad.cd.crop.svg>
\noindent
Given ecological dynamics
\\*[12pt]
\indent
\(
 \frac{dX_i}{dt} = \cdots
\)
\\*[12pt]
\noindent
And distribution of variation
\\*[12pt]
\indent
\(
 p_i
\)
\\*[12pt]
\noindent
We can infer the adaptive dynamics:
\\[12pt]
\indent
\(
 \frac{dp_i}{dt} = \gamma \hat{X}_i \frac{\partial}{p_i} S(p_i)
\)
</source-file>

<source-file filename=constrain.cd display=constrain.cd.crop.svg>
\noindent
The adaptive change in the\\
``ecological characteristics'' $\mathbf{e}_i$
\\*[12pt]
\indent
\(
 \frac{d\mathbf{e}_i}{dt} = \gamma \hat{X}_i \bar{\mathbf{S}}(\mathbf{e}_i)
\)
\\*[12pt]
\noindent
is not in the ``ideal'' direction
\\[12pt]
\indent
\( \mathbf{S}(\mathbf{e}_i) \)
\\*[12pt]
\noindent
but in the ideal direction\\
constrained by the available\\
variation in $\mathbf{p}_i$:
\\[12pt]
\indent
\( \bar{\mathbf{S}}(\mathbf{e}_i) = \frac{\partial\mathbf{e}_i}{\partial\mathbf{p}_i}\frac{\partial\mathbf{e}_i}{\partial\mathbf{p}_i}^T \mathbf{S}(\mathbf{e}_i) \)
</source-file>

<source-file filename=lv.cd display=lv.cd.crop.svg>
\noindent
Lotka-Volterra population\\
dynamics:
\\*[12pt]
\indent
\( \frac{dX_i}{dt} = r_i X_i + \sum_j a_{ij} X_i X_j
\)
\\*[12pt]
\noindent
``Interaction term'' $a_{ij}$ describes\\
the effect of population $j$ on\\
population $i$.
</source-file>

<source-file filename=aij.cd display=aij.cd.crop.svg>
\( a_{ij} \)
</source-file>

<source-file filename=aji.cd display=aji.cd.crop.svg>
\( a_{ji} \)
</source-file>

<source-file filename=ai1.cd display=ai1.cd.crop.svg>
\( a_{i1} \)
</source-file>

<source-file filename=ai2.cd display=ai2.cd.crop.svg>
\( a_{i2} \)
</source-file>

<source-file filename=Sa.cd display=Sa.cd.crop.svg>
\noindent
Population $i$'s adaptation depends\\
on the $r_i$ and $a_{ij}$ terms that\\affect it.
\\*[12pt]
\indent
\( \mathbf{S}(a_{ij}) = \frac{\partial}{\partial a_{ij}}(r_i + \sum_ja_{ij}X_j^*)
\)
\\*[12pt]
\indent
\( \quad\quad\quad = X_j^* \)
\\*[12pt]
\noindent
The ``ideal direction'' of change in\\
these interactions is always\\
positive.
</source-file>


## sage.mk

<source-file filename="sage.mk">
# Makefile to connect the Sage code here with the code in SageDynamics

# the three upstream projects are all bundled into one git repo
export SageUtils            = $(realpath $(SageDynamicsRepo)/SageUtils)
export SageDynamics         = $(realpath $(SageDynamicsRepo)/SageDynamics)
export SageAdaptiveDynamics = $(realpath $(SageDynamicsRepo)/SageAdaptiveDynamics)
 
# When we need something from the upstream projects, make it there
$(SageDynamics)/% : /proc/uptime
	$(MAKE) --no-print-directory -C $(SageDynamics) $*
 
$(SageAdaptiveDynamics)/% : /proc/uptime
	$(MAKE) --no-print-directory -C $(SageAdaptiveDynamics) $*
 
# The good makefile stuff is upstream, just reuse it
-include $(SageUtils)/sage.mk
-include $(SageUtils)/step.mk
</source-file>
